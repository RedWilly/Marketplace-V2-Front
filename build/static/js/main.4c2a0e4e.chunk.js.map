{"version":3,"sources":["serviceWorker.js","components/Whitelist.js","util/Nft.js","graphql/Queries.js","components/Market/BuyNow.js","assets/icons/lightning.svg","assets/icons/heart.svg","assets/icons/brig.svg","assets/IMG/background.png","components/HeroSection.js","pages/Home.js","assets/IMG/nuggets.png","assets/IMG/blast_riders.png","assets/IMG/ape.png","assets/IMG/zkokaydog.png","assets/IMG/blast_knives.png","components/Market/ListNFTModal.js","components/Market/DeListNFTModal.js","components/Market/CancelBidModel.js","pages/Wallet.js","components/ColorModeSwitcher.js","assets/logo.svg","components/Logo.js","components/Header.js","components/Market/MakeOffer.js","components/Market/AcceptOffer.js","components/NFTDetail.js","pages/Collection.js","graphql/apollo-client.js","App.js","reportWebVitals.js","index.js","hooks/useWallet.js"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","whitelist","middlewareBaseURL","Nft","constructor","chain","collection","id","this","metadata","metadataResponse","axios","get","concat","status","data","Error","image","owner","gql","_templateObject","_taggedTemplateLiteral","GET_LISTINGS_FOR_NFT_ADDRESS","_templateObject2","GET_ACTIVE_LISTING_BY_NFT","_templateObject3","GET_LISTED_NFTS_FOR_ADDRESS","_templateObject4","GET_BIDS_BY_ADDRESS","_templateObject5","GET_ACTIVE_BIDS_FOR_NFT","_templateObject6","_templateObject7","GET_ALL_SOLD_FOR_NFT","_templateObject8","GET_COLLECTION_STATS","_templateObject9","_templateObject10","GET_ALL_NFTS_OWNED_BY_USER","_templateObject11","GET_COLLECTION_NAME","_templateObject12","GET_MOST_RECENT_LISTING","_templateObject13","GET_MOST_RECENT_SOLD","_templateObject14","BuyNow","_path","_ref","erc721Address","tokenId","price","account","library","useWallet","_jsx","Button","colorScheme","onClick","async","alert","signer","getSigner","contract","ethers","Contract","process","MarketABI","transaction","buyToken","value","wait","children","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","SvgLightning","svgRef","title","titleId","props","xmlns","fill","viewBox","strokeWidth","stroke","className","ref","strokeLinecap","strokeLinejoin","d","ForwardRef","SvgHeart","SvgBrig","HeroSection","Box","bgImage","backgroundImage","bgPosition","bgRepeat","bgSize","color","height","_jsxs","Flex","direction","justify","align","bg","paddingY","Heading","as","size","textAlign","mb","Text","fontSize","Stack","spacing","LightningIcon","style","marginRight","AggregateIcon","HeartIcon","images","Nuggets","Ape","Home","navigate","useNavigate","recentListingsData","useQuery","recentSalesData","recentListings","setRecentListings","useState","recentSales","setRecentSales","useEffect","listings","listingsWithMetadata","Promise","all","map","nft","listing","name","displayPrice","utils","formatEther","fetchListingsMetadata","sales","salesWithMetadata","sale","fetchSalesMetadata","navigateToNFTDetail","_Fragment","p","Grid","templateColumns","gap","entries","index","address","imageSrc","shadow","borderWidth","rounded","_hover","cursor","handleCollectionClick","Image","src","alt","boxSize","objectFit","m","mt","fontWeight","Tabs","isFitted","variant","TabList","Tab","TabPanels","TabPanel","item","e","stopPropagation","ListNFTModal","isOpen","onClose","contractAddress","setPrice","duration","setDuration","marketplaceAddress","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","FormControl","FormLabel","Input","type","onChange","placeholder","Select","ModalFooter","mr","log","erc721Contract","ERC721ABI","marketContract","priceInWei","parseEther","expiryTimestamp","Date","now","isApprovedForAll","txApprove","setApprovalForAll","txList","listToken","Math","floor","DeListNFTModal","tx","delistToken","CancelBidModal","withdrawBidForToken","Wallet","nfts","setNfts","bids","setBids","setListings","isListModalOpen","setIsListModalOpen","selectedNFT","setSelectedNFT","isDeListModalOpen","setIsDeListModalOpen","selectedNFTForDelist","setSelectedNFTForDelist","isCancelBidModalOpen","setIsCancelBidModalOpen","selectedNFTForBidCancel","setSelectedNFTForBidCancel","loading","variables","seller","toLowerCase","skip","bidsData","bidder","ownedNFTsData","ownedNFTsLoading","ownedNFTsError","toString","fetchAllMetadata","bidsWithMetadata","bid","fetchBidsMetadata","processOwnedNFTs","ownedNfts","erc721S","metadataNft","filter","some","NFTCard","_nft$metadata","_nft$metadata2","_nft$metadata3","isListing","isBid","borderRadius","overflow","position","lineHeight","isTruncated","openDeListModal","openCancelBidModal","openListModal","display","gridTemplateColumns","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","IconButton","icon","Logo","logo","NAV_ITEMS","label","href","DesktopNavLink","navItem","Link","textDecoration","MobileNavLink","_ref2","px","py","borderStyle","borderTop","borderColor","Header","onToggle","useDisclosure","searchValue","setSearchValue","connect","active","chainId","handleSearchSubmit","h","base","borderBottom","w","pointerEvents","pl","flex","InputGroup","md","InputLeftElement","SearchIcon","event","onKeyPress","ml","undefined","substring","justifySelf","CloseIcon","HamburgerIcon","Collapse","in","animateOpacity","MakeOffer","WETHAddress","setValue","isApproved","setIsApproved","toast","useToast","WETHContract","WETHABI","allowance","gt","checkAllowance","approve","description","isClosable","expireTimestamp","calculateExpiryTimestamp","secondsToAdd","enterBidForToken","AcceptOffer","ownerOf","fetchOwner","checkApproval","formatUnits","acceptBidForToken","parseUnits","isDisabled","NFTDetail","_nftDetails$attribute","useParams","nftDetails","setNftDetails","isListed","setIsListed","isSeller","setIsSeller","isOwner","setIsOwner","isOfferOpen","onOpen","onOfferOpen","onOfferClose","isBidsOpen","onBidsToggle","selectedBid","setSelectedBid","isAcceptOfferOpen","onAcceptOfferOpen","onAcceptOfferClose","isSalesOpen","onSalesToggle","salesData","formatDate","timestamp","date","toLocaleDateString","toLocaleTimeString","formatAddress","slice","formatExpiration","diff","days","hours","minutes","fetchNFTDetails","VStack","templateAreas","GridItem","attributes","attr","trait_type","handleSelectBid","buyer","ChakraLink","split","isExternal","Collection","_collectionStatsData$","collectionName","setCollectionName","collectionStatsData","listingsData","collectionNameData","currentTimestamp","updatedListings","parseInt","justifyContent","alignItems","collectionStats","totalVolumeTraded","handleNFTClick","client","ApolloClient","uri","cache","InMemoryCache","getLibrary","provider","providers","Web3Provider","App","ApolloProvider","ChakraProvider","theme","Web3ReactProvider","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ColorModeScript","document","getElementById","injected","InjectedConnector","supportedChainIds","activate","deactivate","useWeb3React","isAuthorized","ex","disconnect","defaultProvider","JsonRpcProvider"],"mappings":"inEAAA,8CAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAiHC,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAKC,IACJA,EAAaL,YAAY,IAE1BM,OAAMC,IACLC,QAAQD,MAAMA,EAAME,QAAQ,GAGpC,C,8NCrIeC,MARG,CACd,QAAW,6CACX,eAAgB,6CAChB,IAAO,6CACP,UAAa,6CACb,eAAgB,8C,SCHpB,MAAMC,EAAoB,qBA+BXC,I,4BAAAA,EA7Bf,MACIC,YAAYC,EAAOC,EAAYC,GAC3BC,KAAKH,MAAQA,EACbG,KAAKF,WAAaA,EAClBE,KAAKD,GAAKA,CACd,CAEA,cAAME,GAEF,MAAMC,QAAyBC,IAAMC,IAAI,GAADC,OAAIX,EAAiB,cAAAW,OAAaL,KAAKH,MAAK,KAAAQ,OAAIL,KAAKF,WAAU,KAAAO,OAAIL,KAAKD,KAChH,GAAgC,MAA5BG,EAAiBI,SAAmBJ,EAAiBK,KACrD,MAAM,IAAIC,MAAM,4CAEpB,OAAON,EAAiBK,IAC5B,CAEAE,QACI,MAAM,GAANJ,OAAUX,EAAiB,WAAAW,OAAUL,KAAKH,MAAK,KAAAQ,OAAIL,KAAKF,WAAU,KAAAO,OAAIL,KAAKD,GAC/E,CAEA,WAAMW,GACF,MAAMR,QAAyBC,IAAMC,IAAI,GAADC,OAAIX,EAAiB,WAAAW,OAAUL,KAAKH,MAAK,KAAAQ,OAAIL,KAAKF,WAAU,KAAAO,OAAIL,KAAKD,KAC7G,GAAgC,MAA5BG,EAAiBI,SAAmBJ,EAAiBK,KACrD,MAAM,IAAIC,MAAM,4CAEpB,OAAON,EAAiBK,KAAKG,KACjC,G,0BC3B+BC,YAAGC,MAAAC,YAAA,2MAA/B,MAeMC,EAA+BH,YAAGI,MAAAF,YAAA,qPAclCG,EAA4BL,YAAGM,MAAAJ,YAAA,6SAe/BK,EAA8BP,YAAGQ,MAAAN,YAAA,oPAejCO,EAAsBT,YAAGU,MAAAR,YAAA,uNA8BzBS,GAfsBX,YAAGY,MAAAV,YAAA,uMAeCF,YAAGa,MAAAX,YAAA,uUAmB7BY,EAAuBd,YAAGe,MAAAb,YAAA,gTAmC1Bc,GAf2BhB,YAAGiB,MAAAf,YAAA,6OAePF,YAAGkB,MAAAhB,YAAA,0LAa1BiB,EAA6BnB,YAAGoB,MAAAlB,YAAA,yJAWhCmB,EAAsBrB,YAAGsB,MAAApB,YAAA,kGAWzBqB,EAA0BvB,YAAGwB,MAAAtB,YAAA,2PAgB7BuB,EAAuBzB,YAAG0B,MAAAxB,YAAA,+Q,2BCjKxByB,ICpCXC,EDoCWD,EA9BAE,IAAwC,IAAvC,cAAEC,EAAa,QAAEC,EAAO,MAAEC,GAAOH,EAC7C,MAAM,QAAEI,EAAO,QAAEC,GAAYC,cAsB7B,OACIC,cAACC,IAAM,CAACC,YAAY,OAAOC,QApBVC,UACjB,IAAKP,IAAYC,EAEb,YADAO,MAAM,qCAIV,MAAMC,EAASR,EAAQS,UAAUV,GAC3BW,EAAW,IAAIC,IAAOC,SATLC,6CASkCC,EAAWN,GAEpE,IACI,MAAMO,QAAoBL,EAASM,SAASpB,EAAeC,EAAS,CAAEoB,MAAOnB,UACvEiB,EAAYG,OAClBX,MAAM,qBACV,CAAE,MAAO9D,GACLC,QAAQD,MAAM,sBAAuBA,GACrC8D,MAAM,+CACV,GAIiDY,SAAC,WAEzC,EC/BjB,SAASC,KAAiS,OAApRA,GAAWC,OAAOC,OAASD,OAAOC,OAAOC,OAAS,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcP,OAAOS,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,GAAU,CAAE,OAAOL,CAAQ,EAAUJ,GAASa,MAAM9E,KAAMuE,UAAY,CAElV,SAASQ,GAAavC,EAAMwC,GAC1B,IAAI,MACFC,EAAK,QACLC,KACGC,GACD3C,EACJ,OAAoB,gBAAoB,MAAOyB,GAAS,CACtDmB,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACRC,UAAW,UACXC,IAAKV,EACL,kBAAmBE,GAClBC,GAAQF,EAAqB,gBAAoB,QAAS,CAC3DlF,GAAImF,GACHD,GAAS,KAAM1C,IAAUA,EAAqB,gBAAoB,OAAQ,CAC3EoD,cAAe,QACfC,eAAgB,QAChBC,EAAG,iEAEP,CACA,MAAMC,GAA0B,aAAiBf,IAClC,IC3BX,GD2BW,IC1Bf,SAAS,KAAiS,OAApR,GAAWb,OAAOC,OAASD,OAAOC,OAAOC,OAAS,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcP,OAAOS,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,GAAU,CAAE,OAAOL,CAAQ,EAAU,GAASS,MAAM9E,KAAMuE,UAAY,CAElV,SAASwB,GAASvD,EAAMwC,GACtB,IAAI,MACFC,EAAK,QACLC,KACGC,GACD3C,EACJ,OAAoB,gBAAoB,MAAO,GAAS,CACtD4C,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACRC,UAAW,UACXC,IAAKV,EACL,kBAAmBE,GAClBC,GAAQF,EAAqB,gBAAoB,QAAS,CAC3DlF,GAAImF,GACHD,GAAS,KAAM,KAAU,GAAqB,gBAAoB,OAAQ,CAC3EU,cAAe,QACfC,eAAgB,QAChBC,EAAG,mKAEP,CACA,MAAM,GAA0B,aAAiBE,IAClC,IC3BX,GD2BW,IC1Bf,SAAS,KAAiS,OAApR,GAAW7B,OAAOC,OAASD,OAAOC,OAAOC,OAAS,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcP,OAAOS,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,GAAU,CAAE,OAAOL,CAAQ,EAAU,GAASS,MAAM9E,KAAMuE,UAAY,CAElV,SAASyB,GAAQxD,EAAMwC,GACrB,IAAI,MACFC,EAAK,QACLC,KACGC,GACD3C,EACJ,OAAoB,gBAAoB,MAAO,GAAS,CACtD4C,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACRC,UAAW,UACXC,IAAKV,EACL,kBAAmBE,GAClBC,GAAQF,EAAqB,gBAAoB,QAAS,CAC3DlF,GAAImF,GACHD,GAAS,KAAM,KAAU,GAAqB,gBAAoB,OAAQ,CAC3EU,cAAe,QACfC,eAAgB,QAChBC,EAAG,uMAEP,CACA,MAAM,GAA0B,aAAiBG,IAClC,QC3BA,OAA0B,uCCkD1BC,OA3CKA,IAEZlD,cAACmD,IAAG,CACAC,QAAO,OAAA9F,OAAS+F,GAAe,KAC/BC,WAAW,SACXC,SAAS,YACTC,OAAO,QACPC,MAAM,QACNC,OAAO,KAAIzC,SAEX0C,eAACC,IAAI,CACDC,UAAU,SACVC,QAAQ,SACRC,MAAM,SACNL,OAAO,OACPM,GAAG,qBACHC,SAAS,IAAGhD,SAAA,CAEZjB,cAACkE,IAAO,CAACC,GAAG,KAAKC,KAAK,MAAMC,UAAU,SAASC,GAAG,IAAGrD,SAAC,sCAGtDjB,cAACuE,IAAI,CAACC,SAAS,KAAKH,UAAU,SAASC,GAAG,IAAGrD,SAAC,yCAG9C0C,eAACc,IAAK,CAACZ,UAAU,MAAMa,QAAQ,KAAKX,MAAM,SAASD,QAAQ,SAAQ7C,SAAA,CAC/D0C,eAACC,IAAI,CAACG,MAAM,SAAQ9C,SAAA,CAChBjB,cAAC2E,GAAa,CAACC,MAAO,CAAEC,YAAa,SACrC7E,cAACuE,IAAI,CAAAtD,SAAC,8BAEV0C,eAACC,IAAI,CAACG,MAAM,SAAQ9C,SAAA,CAChBjB,cAAC8E,GAAa,CAACF,MAAO,CAAEC,YAAa,SAAW,IAChD7E,cAACuE,IAAI,CAAAtD,SAAC,2BAEV0C,eAACC,IAAI,CAACG,MAAM,SAAQ9C,SAAA,CAChBjB,cAAC+E,GAAS,CAACH,MAAO,CAAEC,YAAa,SACjC7E,cAACuE,IAAI,CAAAtD,SAAC,sCCrB9B,MAAM+D,GAAS,CACbC,QCtBa,IAA0B,oCDuBvC,eEvBa,IAA0B,yCFwBvCC,IGxBa,IAA0B,gCHyBvC,UIzBa,IAA0B,sCJ0BvC,eK1Ba,IAA0B,0CLsJ1BC,OAzHFA,KACX,MAAMC,EAAWC,eAET7H,KAAM8H,GAAuBC,YAASpG,IACtC3B,KAAMgI,GAAoBD,YAASlG,IAEpCoG,EAAgBC,GAAqBC,mBAAS,KAC9CC,EAAaC,GAAkBF,mBAAS,IAE/CG,qBAAU,KACR,GAAIR,GAAsBA,EAAmBS,SAAU,CACvB3F,WAC5B,MAAM4F,QAA6BC,QAAQC,IAAIZ,EAAmBS,SAASI,KAAI/F,UAC7E,MAAMgG,EAAM,IAAIxJ,EAAI,UAAWyJ,EAAQ3G,cAAe2G,EAAQ1G,SACxDzC,QAAiBkJ,EAAIlJ,WAC3B,MAAO,IACFmJ,EACHC,KAAMpJ,EAASoJ,KACf5I,MAAO0I,EAAI1I,QAEX6I,aAAc9F,IAAO+F,MAAMC,YAAYJ,EAAQzG,OAC/CA,MAAOyG,EAAQzG,MAChB,KAEH8F,EAAkBM,EAAqB,EAEzCU,EACF,IACC,CAACpB,IAEJQ,qBAAU,KACR,GAAIN,GAAmBA,EAAgBmB,MAAO,CACjBvG,WACzB,MAAMwG,QAA0BX,QAAQC,IAAIV,EAAgBmB,MAAMR,KAAI/F,UACpE,MAAMgG,EAAM,IAAIxJ,EAAI,UAAWiK,EAAKnH,cAAemH,EAAKlH,SAClDzC,QAAiBkJ,EAAIlJ,WAC3B,MAAO,IACF2J,EACHP,KAAMpJ,EAASoJ,KACf5I,MAAO0I,EAAI1I,QACXkC,MAAOa,IAAO+F,MAAMC,YAAYI,EAAKjH,OACtC,KAEHiG,EAAee,EAAkB,EAEnCE,EACF,IACC,CAACtB,IAGJ,MAIMuB,EAAsBA,CAACrH,EAAeC,KAC1CyF,EAAS,eAAD9H,OAAgBoC,EAAa,KAAApC,OAAIqC,GAAU,EAGrD,OACEgE,eAAAqD,WAAA,CAAA/F,SAAA,CACEjB,cAACkD,GAAW,IACZS,eAACR,IAAG,CAAC8D,EAAG,EAAEhG,SAAA,CACRjB,cAACkH,IAAI,CAACC,gBAAgB,wCAAwCC,IAAK,EAAEnG,SAClEE,OAAOkG,QAAQ3K,GAAWyJ,KAAI,CAAA1G,EAAkB6H,KAAW,IAA3BhB,EAAMiB,GAAQ9H,EAC7C,MAAM+H,EAAWxC,GAAOsB,GACxB,OACE3C,eAACR,IAAG,CAAa8D,EAAG,EAAGQ,OAAO,KAAKC,YAAY,MAAMC,QAAQ,KAAKC,OAAQ,CAAEH,OAAQ,MAAQI,OAAO,UAAU1H,QAASA,IAhBnGoH,KAC7BnC,EAAS,eAAD9H,OAAgBiK,GAAU,EAeoGO,CAAsBP,GAAStG,SAAA,CACzJjB,cAAC+H,IAAK,CAACC,IAAKR,EAAUS,IAAK3B,EAAM4B,QAAQ,QAAQC,UAAU,QAAQC,EAAE,SACrEpI,cAACuE,IAAI,CAAC8D,GAAI,EAAGhE,UAAU,SAASiE,WAAW,OAAMrH,SAAEqF,MAF3CgB,EAGJ,MAIZtH,cAACmD,IAAG,CAACkB,UAAU,SAASgE,GAAI,EAAEpH,SAC5BjB,cAACC,IAAM,CAACC,YAAY,OAAOC,QAASA,IAAMiF,EAAS,aAAanE,SAAC,2BAInE0C,eAACR,IAAG,CAACkF,GAAI,GAAGpH,SAAA,CACVjB,cAACkE,IAAO,CAACC,GAAG,KAAKC,KAAK,KAAKC,UAAU,SAASC,GAAI,EAAErD,SAAC,sBACrD0C,eAAC4E,IAAI,CAACC,UAAQ,EAACC,QAAQ,WAAUxH,SAAA,CAC/B0C,eAAC+E,IAAO,CAACpE,GAAG,MAAKrD,SAAA,CACfjB,cAAC2I,IAAG,CAAA1H,SAAC,iBACLjB,cAAC2I,IAAG,CAAA1H,SAAC,mBAEP0C,eAACiF,IAAS,CAAA3H,SAAA,CACRjB,cAAC6I,IAAQ,CAAA5H,SACPjB,cAACkH,IAAI,CAACC,gBAAgB,wCAAwCC,IAAK,EAAEnG,SAClEwE,EAAeU,KAAI,CAAC2C,EAAMxB,IACzB3D,eAACR,IAAG,CAAa8D,EAAG,EAAGQ,OAAO,KAAKC,YAAY,MAAMC,QAAQ,KAAKE,OAAO,UAAU1H,QAASA,IAAM4G,EAAoB+B,EAAKpJ,cAAeoJ,EAAKnJ,SAASsB,SAAA,CACtJjB,cAAC+H,IAAK,CAACC,IAAKc,EAAKpL,MAAOuK,IAAKa,EAAKxC,KAAM4B,QAAQ,QAAQC,UAAU,QAAQC,EAAE,SAC5EpI,cAACuE,IAAI,CAAC8D,GAAI,EAAGhE,UAAU,SAASiE,WAAW,OAAMrH,SAAE6H,EAAKxC,OACxD3C,eAACY,IAAI,CAAC8D,GAAI,EAAGhE,UAAU,SAAQpD,SAAA,CAAE6H,EAAKvC,aAAa,UACnDvG,cAAA,OAAKG,QAAU4I,GAAMA,EAAEC,kBAAkB/H,SACvCjB,cAACT,EAAM,CAACG,cAAeoJ,EAAKpJ,cAAeC,QAASmJ,EAAKnJ,QAASC,MAAOkJ,EAAKlJ,YALxE0H,SAYhBtH,cAAC6I,IAAQ,CAAA5H,SACPjB,cAACkH,IAAI,CAACC,gBAAgB,wCAAwCC,IAAK,EAAEnG,SAClE2E,EAAYO,KAAI,CAAC2C,EAAMxB,IACtB3D,eAACR,IAAG,CAAa8D,EAAG,EAAGQ,OAAO,KAAKC,YAAY,MAAMC,QAAQ,KAAKE,OAAO,UAAU1H,QAASA,IAAM4G,EAAoB+B,EAAKpJ,cAAeoJ,EAAKnJ,SAASsB,SAAA,CACtJjB,cAAC+H,IAAK,CAACC,IAAKc,EAAKpL,MAAOuK,IAAKa,EAAKxC,KAAM4B,QAAQ,QAAQC,UAAU,QAAQC,EAAE,SAC5EpI,cAACuE,IAAI,CAAC8D,GAAI,EAAGhE,UAAU,SAASiE,WAAW,OAAMrH,SAAE6H,EAAKxC,OACxD3C,eAACY,IAAI,CAAC8D,GAAI,EAAGhE,UAAU,SAAQpD,SAAA,CAAE6H,EAAKlJ,MAAM,UAC5CI,cAACC,IAAM,CAACC,YAAY,OAAOC,QAAU4I,IAAQA,EAAEC,kBAAmBjC,EAAoB+B,EAAKpJ,cAAeoJ,EAAKnJ,QAAQ,EAAIsB,SAAC,kBAJpHqG,uBAavB,E,gDM1CQ2B,OAhGMxJ,IAAoD,IAAnD,OAAEyJ,EAAM,QAAEC,EAAO,gBAAEC,EAAe,QAAEzJ,GAASF,EAC/D,MAAOG,EAAOyJ,GAAY1D,mBAAS,KAC5B2D,EAAUC,GAAe5D,mBAAS,OACnC6D,EAAqB7I,8CACrB,QAAEd,EAAO,QAAEC,GAAYC,cA2D7B,OACI4D,eAAC8F,KAAK,CAACP,OAAQA,EAAQC,QAASA,EAAQlI,SAAA,CACpCjB,cAAC0J,KAAY,IACb/F,eAACgG,KAAY,CAAA1I,SAAA,CACTjB,cAAC4J,KAAW,CAAA3I,SAAC,sBACbjB,cAAC6J,KAAgB,IACjBlG,eAACmG,KAAS,CAAA7I,SAAA,CACN0C,eAACoG,KAAW,CAAA9I,SAAA,CACRjB,cAACgK,KAAS,CAAA/I,SAAC,iBACXjB,cAACiK,KAAK,CAACC,KAAK,OAAOnJ,MAAOnB,EAAOuK,SAAWpB,GAAMM,EAASN,EAAEzH,OAAOP,OAAQqJ,YAAY,0BAE5FzG,eAACoG,KAAW,CAAC1B,GAAI,EAAEpH,SAAA,CACfjB,cAACgK,KAAS,CAAA/I,SAAC,aACX0C,eAAC0G,KAAM,CAACtJ,MAAOuI,EAAUa,SAAWpB,GAAMQ,EAAYR,EAAEzH,OAAOP,OAAOE,SAAA,CAClEjB,cAAA,UAAQe,MAAM,MAAKE,SAAC,aACpBjB,cAAA,UAAQe,MAAM,KAAIE,SAAC,WACnBjB,cAAA,UAAQe,MAAM,KAAIE,SAAC,YACnBjB,cAAA,UAAQe,MAAM,KAAIE,SAAC,aACnBjB,cAAA,UAAQe,MAAM,KAAIE,SAAC,sBAI/B0C,eAAC2G,KAAW,CAAArJ,SAAA,CACRjB,cAACC,IAAM,CAACC,YAAY,OAAOqK,GAAI,EAAGpK,QAhFlCC,UAGZ,GAFA5D,QAAQgO,IAAI,+BAAgC,CAAEpB,kBAAiBzJ,UAASC,WAEnEA,IAAU0J,EAEX,YADAjJ,MAAM,wFAIV,MAAMoK,EAAiB,IAAIhK,IAAOC,SAAS0I,EAAiBsB,GAAW5K,EAAQS,aACzEoK,EAAiB,IAAIlK,IAAOC,SAAS8I,EAAoB5I,EAAWd,EAAQS,aAG5EqK,EAAanK,IAAO+F,MAAMqE,WAAWjL,GAG3C,IAAIkL,EAAkBC,KAAKC,MAAQ,IACnC,OAAQ1B,GACJ,IAAK,MAeL,QACIwB,GAAmB,YAbvB,IAAK,KACDA,GAAmB,OACnB,MACJ,IAAK,KACDA,GAAmB,OACnB,MACJ,IAAK,KACDA,GAAmB,OACnB,MACJ,IAAK,KACDA,GAAmB,QAM3B,IAGI,UADyBL,EAAeQ,iBAAiBpL,EAAS2J,GACjD,CAEb,MAAM0B,QAAkBT,EAAeU,kBAAkB3B,GAAoB,SACvE0B,EAAUlK,MACpB,CAGA,MAAMoK,QAAeT,EAAeU,UAAUjC,EAAiBzJ,EAASiL,EAAYU,KAAKC,MAAMT,UACzFM,EAAOpK,OAEbX,MAAM,4BACN8I,GACJ,CAAE,MAAO5M,GACLC,QAAQD,MAAM,sBAAuBA,GACrC8D,MAAM,8CACV,GA0B+DY,SAAC,qBAGpDjB,cAACC,IAAM,CAACwI,QAAQ,QAAQtI,QAASgJ,EAAQlI,SAAC,mBAG9C,ECzCDuK,OA3CQ/L,IAAoD,IAAnD,OAAEyJ,EAAM,QAAEC,EAAO,gBAAEC,EAAe,QAAEzJ,GAASF,EACjE,MACM,QAAEK,GAAYC,cAqBpB,OACI4D,eAAC8F,KAAK,CAACP,OAAQA,EAAQC,QAASA,EAAQlI,SAAA,CACpCjB,cAAC0J,KAAY,IACb/F,eAACgG,KAAY,CAAA1I,SAAA,CACTjB,cAAC4J,KAAW,CAAA3I,SAAC,eACbjB,cAAC6J,KAAgB,IACjB7J,cAAC8J,KAAS,CAAA7I,SACNjB,cAACuE,IAAI,CAAAtD,SAAC,gDAEV0C,eAAC2G,KAAW,CAAArJ,SAAA,CACRjB,cAACC,IAAM,CAACC,YAAY,OAAOqK,GAAI,EAAGpK,QA7BhCC,UACd,GAAKN,GAAYsJ,GAAoBzJ,EAKrC,IACI,MAAMgL,EAAiB,IAAIlK,IAAOC,SAVfC,6CAU4CC,EAAWd,EAAQS,aAC5EkL,QAAWd,EAAee,YAAYtC,EAAiBzJ,SACvD8L,EAAGzK,OAETX,MAAM,8BACN8I,GACJ,CAAE,MAAO5M,GACLC,QAAQD,MAAM,wBAAyBA,GACvC8D,MAAM,gDACV,MAdIA,MAAM,yDAcV,EAaiEY,SAAC,mBAGtDjB,cAACC,IAAM,CAACwI,QAAQ,QAAQtI,QAASgJ,EAAQlI,SAAC,mBAG9C,ECID0K,OA3CQlM,IAAoD,IAAnD,OAAEyJ,EAAM,QAAEC,EAAO,gBAAEC,EAAe,QAAEzJ,GAASF,EACjE,MACM,QAAEK,GAAYC,cAqBpB,OACI4D,eAAC8F,KAAK,CAACP,OAAQA,EAAQC,QAASA,EAAQlI,SAAA,CACpCjB,cAAC0J,KAAY,IACb/F,eAACgG,KAAY,CAAA1I,SAAA,CACTjB,cAAC4J,KAAW,CAAA3I,SAAC,eACbjB,cAAC6J,KAAgB,IACjB7J,cAAC8J,KAAS,CAAA7I,SACNjB,cAACuE,IAAI,CAAAtD,SAAC,4DAEV0C,eAAC2G,KAAW,CAAArJ,SAAA,CACRjB,cAACC,IAAM,CAACC,YAAY,OAAOqK,GAAI,EAAGpK,QA7BhCC,UACd,GAAKN,GAAYsJ,GAAoBzJ,EAKrC,IACI,MAAMgL,EAAiB,IAAIlK,IAAOC,SAVfC,6CAU4CC,EAAWd,EAAQS,aAC5EkL,QAAWd,EAAeiB,oBAAoBxC,EAAiBzJ,SAC/D8L,EAAGzK,OAETX,MAAM,+BACN8I,GACJ,CAAE,MAAO5M,GACLC,QAAQD,MAAM,wBAAyBA,GACvC8D,MAAM,iDACV,MAdIA,MAAM,qEAcV,EAaiEY,SAAC,uBAGtDjB,cAACC,IAAM,CAACwI,QAAQ,QAAQtI,QAASgJ,EAAQlI,SAAC,mBAG9C,EC8PD4K,OA5RAA,KACb,MAAOC,EAAMC,GAAWpG,mBAAS,KAC3B,QAAE9F,EAAO,QAAEC,GAAYC,eACtBiM,EAAMC,GAAWtG,mBAAS,KAC1BI,EAAUmG,GAAevG,mBAAS,KAElCwG,EAAiBC,GAAsBzG,oBAAS,IAChD0G,EAAaC,GAAkB3G,mBAAS,CAAC,IACzC4G,EAAmBC,GAAwB7G,oBAAS,IACpD8G,EAAsBC,GAA2B/G,mBAAS,OAC1DgH,EAAsBC,GAA2BjH,oBAAS,IAC1DkH,EAAyBC,GAA8BnH,mBAAS,OAGjE,KAAEnI,EAAI,QAAEuP,EAAO,MAAExQ,GAAUgJ,YAASpH,EAA6B,CACrE6O,UAAW,CAAEC,OAAe,OAAPpN,QAAO,IAAPA,OAAO,EAAPA,EAASqN,eAC9BC,MAAOtN,KAIDrC,KAAM4P,GAAa7H,YAASlH,EAAqB,CACvD2O,UAAW,CAAEK,OAAe,OAAPxN,QAAO,IAAPA,OAAO,EAAPA,EAASqN,eAC9BC,MAAOtN,KAIDrC,KAAM8P,EAAeP,QAASQ,EAAkBhR,MAAOiR,GAAmBjI,YAASxG,EAA4B,CACrHiO,UAAW,CAAErP,MAAc,OAAPkC,QAAO,IAAPA,OAAO,EAAPA,EAASqN,eAC7BC,MAAOtN,IAwFT,GArFAiG,qBAAU,KACRtJ,QAAQgO,IAAI,sBAAuBhN,GACnChB,QAAQgO,IAAI,yBAA0BuC,GACtCvQ,QAAQgO,IAAI,uBAAwBjO,EAAM,GACzC,CAACiB,EAAMuP,EAASxQ,IAInBuJ,qBAAU,KACR,GAAItI,GAAQA,EAAKuI,SAAU,CACA3F,WACvB,MAAM4F,QAA6BC,QAAQC,IAAI1I,EAAKuI,SAASI,KAAI/F,UAC/D,MAAMgG,EAAM,IAAIxJ,EAAI,UAAWyJ,EAAQ3G,cAAe2G,EAAQ1G,SACxDzC,QAAiBkJ,EAAIlJ,WAE3B,OADAA,EAASQ,MAAQ0I,EAAI1I,QACd,IACF2I,EACHnJ,WACAkM,gBAAiB/C,EAAQ3G,cACzBC,QAAS0G,EAAQ1G,QAAQ8N,WAC1B,KAIHvB,EAAYlG,EAAqB,EAGnC0H,EACF,IACC,CAAClQ,EAAMsC,IAGVgG,qBAAU,KACR,GAAIsH,GAAYA,EAASpB,KAAM,CACH5L,WACxB,MAAMuN,QAAyB1H,QAAQC,IAAIkH,EAASpB,KAAK7F,KAAI/F,UAC3D,MAAMgG,EAAM,IAAIxJ,EAAI,UAAWgR,EAAIlO,cAAekO,EAAIjO,SAChDzC,QAAiBkJ,EAAIlJ,WAE3B,OADAA,EAASQ,MAAQ0I,EAAI1I,QACd,IACFkQ,EACH1Q,WACAkM,gBAAiBwE,EAAIlO,cACrBC,QAASiO,EAAIjO,QAAQ8N,WACtB,KAEHxB,EAAQ0B,EAAiB,EAG3BE,EACF,IACC,CAACT,EAAUtN,IAGdgG,qBAAU,KACR,GAAIwH,IAAkBC,IAAqBC,EAAgB,CACzD,MAAMM,EAAmB1N,UACvB,IAEE,MAAM2N,QAAkB9H,QAAQC,IAAIoH,EAAcU,QAAQ7H,KAAI/F,UAC5D,MAAM6N,EAAc,IAAIrR,EAAI,UAAWwJ,EAAImB,QAASnB,EAAIzG,SAExD,MAAO,CACLzC,eAFqB+Q,EAAY/Q,WAGjCyC,QAASyG,EAAIzG,QAAQ8N,WACrBrE,gBAAiBhD,EAAImB,QACtB,KAIHwE,EAAQgC,EAAUG,QAAO9H,IAEtBL,EAASoI,MAAK9H,GACbA,EAAQ1G,UAAYyG,EAAIzG,SAAW0G,EAAQ3G,cAAcwN,gBAAkB9G,EAAIgD,gBAAgB8D,kBAGrG,CAAE,MAAO3Q,GACPC,QAAQD,MAAM,+BAAgCA,EAChD,GAGFuR,GACF,IACC,CAACR,EAAeC,EAAkBC,EAAgBzH,IAEjDgH,EAAS,OAAO/M,cAAA,KAAAiB,SAAG,eACvB,GAAI1E,EAAO,OAAOyD,cAAA,KAAAiB,SAAG,aAGrB,MAmBMmN,EAAU3O,IAAuC,IAAD4O,EAAAC,EAAAC,EAAA,IAArC,IAAEnI,EAAG,MAAExG,EAAK,UAAE4O,EAAS,MAAEC,GAAOhP,EAC/C,MAAM2F,EAAWC,cAMjB,OACE1B,eAACR,IAAG,CACFuE,YAAY,MACZgH,aAAa,KACbC,SAAS,SACTC,SAAS,WACT/G,OAAO,UACP1H,QAXwB4G,KAC1B3B,EAAS,eAAD9H,OAAgB8I,EAAIgD,gBAAe,KAAA9L,OAAI8I,EAAIzG,SAAU,EAU7BsB,SAAA,CAE9BjB,cAAC+H,IAAK,CAACC,KAAiB,QAAZqG,EAAAjI,EAAIlJ,gBAAQ,IAAAmR,OAAA,EAAZA,EAAc3Q,SAAY,OAAH0I,QAAG,IAAHA,OAAG,EAAHA,EAAK1I,OAAOuK,KAAiB,QAAZqG,EAAAlI,EAAIlJ,gBAAQ,IAAAoR,OAAA,EAAZA,EAAchI,QAAW,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKE,QAC/E3C,eAACR,IAAG,CAAC8D,EAAE,IAAGhG,SAAA,CACRjB,cAACuE,IAAI,CAAC+D,WAAW,WAAWnE,GAAG,KAAK0K,WAAW,QAAQC,aAAW,EAAA7N,UACnD,QAAZsN,EAAAnI,EAAIlJ,gBAAQ,IAAAqR,OAAA,EAAZA,EAAcjI,QAAW,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKE,QAE7B1G,GAAS+D,eAACY,IAAI,CAAAtD,SAAA,CAAC,UAAQR,IAAO+F,MAAMC,YAAY7G,GAAO,UACvD4O,GACCxO,cAACC,IAAM,CACLmE,KAAK,KACLlE,YAAY,MACZmI,GAAG,IACHlI,QAAU4I,IACRA,EAAEC,kBAxCS5C,KACvBsG,EAAwBtG,GACxBoG,GAAqB,EAAK,EAuCduC,CAAgB3I,EAAI,EACpBnF,SACH,mBAIFwN,GACCzO,cAACC,IAAM,CACLmE,KAAK,KACLlE,YAAY,SACZmI,GAAG,IACHlI,QAAU4I,IACRA,EAAEC,kBA/CY5C,KAC1B0G,EAA2B1G,GAC3BwG,GAAwB,EAAK,EA8CjBoC,CAAmB5I,EAAI,EACvBnF,SACH,gBAIDuN,IAAcC,GACdzO,cAACC,IAAM,CACLmE,KAAK,KACLlE,YAAY,OACZmI,GAAG,IACHlI,QAAU4I,IACRA,EAAEC,kBAzEO5C,KACrB5J,QAAQgO,IAAI,8BAA+BpE,GAC3CkG,EAAelG,GACfgG,GAAmB,EAAK,EAuEZ6C,CAAc7I,EAAI,EAClBnF,SACH,uBAKD,EAKV,OACE0C,eAACR,IAAG,CAAC8D,EAAG,EAAEhG,SAAA,CACR0C,eAAC4E,IAAI,CAACC,UAAQ,EAACC,QAAQ,WAAUxH,SAAA,CAC/B0C,eAAC+E,IAAO,CAACpE,GAAG,MAAKrD,SAAA,CACfjB,cAAC2I,IAAG,CAAA1H,SAAC,WACLjB,cAAC2I,IAAG,CAAA1H,SAAC,aACLjB,cAAC2I,IAAG,CAAA1H,SAAC,YAEP0C,eAACiF,IAAS,CAAA3H,SAAA,CACRjB,cAAC6I,IAAQ,CAAA5H,SACPjB,cAACmD,IAAG,CAAC+L,QAAQ,OAAOC,oBAAoB,wCAAwC/H,IAAK,EAAEnG,SACpF6K,EAAK3F,KAAI,CAACC,EAAKkB,IACdtH,cAACoO,EAAO,CAAahI,IAAKA,GAAZkB,SAIpBtH,cAAC6I,IAAQ,CAAA5H,SACP0C,eAACR,IAAG,CAAC+L,QAAQ,OAAOC,oBAAoB,wCAAwC/H,IAAK,EAAEnG,SAAA,CACpF8E,EAASI,KAAI,CAACE,EAASiB,IAEjBjB,EAAQ+C,iBAAoB/C,EAAQ1G,QAKvCK,cAACoO,EAAO,CAENhI,IAAKC,EACLzG,MAAOyG,EAAQzG,MACf4O,WAAW,EACXC,OAAO,GAJFnH,IALP9K,QAAQD,MAAM,4CAA6C8J,GACpD,QAYXrG,cAACiJ,GAAY,CAACC,OAAQiD,EAAiBhD,QAASA,IAAMiD,GAAmB,GAAQhD,gBAAiBiD,EAAYjD,gBAAiBzJ,QAAS0M,EAAY1M,eAGxJgE,eAACkF,IAAQ,CAAA5H,SAAA,CACPjB,cAACmD,IAAG,CAAC+L,QAAQ,OAAOC,oBAAoB,wCAAwC/H,IAAK,EAAEnG,SACpF+K,EAAK7F,KAAI,CAACyH,EAAKtG,IAETsG,EAAIxE,iBAAoBwE,EAAIjO,QAK/BK,cAACoO,EAAO,CAENhI,IAAKwH,EACLhO,MAAOgO,EAAI7M,MACXyN,WAAW,EACXC,OAAO,GAJFnH,IALP9K,QAAQD,MAAM,wCAAyCqR,GAChD,UAab5N,cAAC2L,GAAc,CACbzC,OAAQyD,EACRxD,QAASA,IAAMyD,GAAwB,GACvCxD,gBAAwC,OAAvByD,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyBzD,gBAC1CzJ,QAAgC,OAAvBkN,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyBlN,mBAQ1CK,cAACwL,GAAc,CACbtC,OAAQqD,EACRpD,QAASA,IAAMqD,GAAqB,GACpCpD,gBAAqC,OAApBqD,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBrD,gBACvCzJ,QAA6B,OAApB8M,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB9M,YAE7B,E,4BC7SH,MAAMyP,GAAoBhN,IAC/B,MAAM,gBAAEiN,GAAoBC,cACtBC,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,KAAQC,MAE7C,OACE3P,cAAC4P,IAAU,CACTxL,KAAK,KACLI,SAAS,KACT,0BAAAlH,OAAyBiS,EAAI,SAC7B9G,QAAQ,QACRhF,MAAM,UACNtD,QAASkP,EACTQ,KAAM7P,cAACyP,EAAU,OACbrN,GACJ,ECnBS,WAA0B,iCCIlC,MAAM0N,GAAO1N,GACXpC,cAAC+H,IAAK,CAACC,IAAK+H,MAAU3N,I,aCkB/B,MAAM4N,GAAY,CAChB,CACEC,MAAO,WACPC,KAAM,KAER,CACED,MAAO,SACPC,KAAM,YAIV,SAASC,GAAc1Q,GAAe,IAAd,QAAE2Q,GAAS3Q,EACjC,OACEO,cAACqQ,IAAI,CACHH,KAAME,EAAQF,KACd1L,SAAU,KACV8D,WAAY,IACZ7E,MAAO+L,YAAkB,WAAY,YACrC5H,OAAQ,CACN0I,eAAgB,OAChB7M,MAAO+L,YAAkB,WAAY,UACrCvO,SAEDmP,EAAQH,OAGf,CAEA,SAASM,GAAaC,GAAe,IAAd,QAAEJ,GAASI,EAChC,OACExQ,cAAC4D,IAAI,CACH6M,GAAI,EACJC,GAAI,EACJvM,GAAIkM,IACJH,KAAME,EAAQF,KACdpM,QAAS,gBACT6M,YAAa,QACbC,UAAU,MACVC,YAAarB,YAAkB,WAAY,YAC3CzL,MAAO,SACP6D,OAAQ,CACN0I,eAAgB,QAChBrP,SAEFjB,cAACuE,IAAI,CAAC+D,WAAY,IAAK7E,MAAO+L,YAAkB,WAAY,YAAYvO,SACrEmP,EAAQH,SAIjB,CAwHea,OAjHf,WACE,MAAM,OAAE5H,EAAM,SAAE6H,GAAaC,gBACtBC,EAAaC,GAAkBvL,mBAAS,KACzC,QAAEwL,EAAO,OAAEC,EAAM,QAAEvR,EAAO,QAAEwR,GAAYtR,cACxCqF,EAAWC,cAMXiM,EAAqBA,KAGzBlM,EAAS,eAAD9H,OAAgB2T,EAAY/D,eAAgB,EAUtD,OACEvJ,eAACR,IAAG,CAAAlC,SAAA,CACF0C,eAACC,IAAI,CACH2N,EAAE,OACFd,GAAI,CAAEe,KAAM,GACZ/N,MAAO+L,YAAkB,WAAY,SACrCxL,GAAIwL,YAAkB,QAAS,YAC/BmB,YAAa,QACbc,aAAa,MACbZ,YAAarB,YAAkB,WAAY,YAC3CzL,MAAO,SAAS9C,SAAA,CAEhBjB,cAACmD,IAAG,CAAAlC,SACFjB,cAAC8P,GAAI,CAAC4B,EAAE,OAAOC,cAAc,WAE/B3R,cAACmD,IAAG,CAACyO,GAAG,IAAIC,KAAK,IAAG5Q,SAClB0C,eAACmO,KAAU,CAAC5C,QAAS,CAAEsC,KAAM,OAAQO,GAAI,QAAS9Q,SAAA,CAChDjB,cAACgS,KAAgB,CAAC/Q,SAAUjB,cAACiS,KAAU,CAACxO,MAAM,eAC9CzD,cAACiK,KAAK,CACJyE,aAAa,MACbtE,YAAY,+BACZhG,KAAK,KACLrD,MAAOkQ,EACP9G,SAxCgB+H,IAC1BhB,EAAegB,EAAM5Q,OAAOP,MAAM,EAwCxBoR,WA9BYD,IACJ,UAAdA,EAAMvQ,KACR2P,GACF,IA6BQtR,cAACC,IAAM,CAACE,QAASmR,EAAoBc,GAAI,EAAEnR,SAAC,WAAe,SAG/D0C,eAACR,IAAG,CAACyO,GAAG,IAAI1C,QAAS,CAAEsC,KAAM,OAAQO,GAAI,QAAS9Q,SAAA,CAChDjB,cAACyE,IAAK,CAACmN,GAAG,IAAI/N,UAAU,MAAME,MAAM,SAASW,QAAS,EAAEzD,SACrD+O,GAAU7J,KAAI,CAACiK,EAAS9I,IACvBtH,cAACmQ,GAAc,CAAaC,QAASA,GAAhB9I,OAGzB3D,eAACc,IAAK,CAACmN,GAAG,IAAI/N,UAAU,MAAME,MAAM,SAASW,QAAS,EAAEzD,SAAA,CACtDjB,cAACC,IAAM,CACLwI,QAAS,UACTvI,YAAa,OACbkE,KAAK,KACLjE,QAAUiR,OAAmBiB,EAAVlB,EAAqBlQ,SAEtCmQ,EAA4D,WAAA9T,QArErDiK,EAqEkF1H,EApEjG,GAANvC,OAAUiK,EAAQ+K,UAAU,EAAG,GAAE,OAAAhV,OAAMiK,EAAQ+K,UAAU/K,EAAQ9F,OAAS,MAoElD4P,EAAU,sBAAwB,mBAEhDrR,cAACoP,GAAiB,CAACmD,YAAY,mBAGnC5O,eAACc,IAAK,CAACZ,UAAU,MAAMqL,QAAS,CAAEsC,KAAM,OAAQO,GAAI,QAAS9Q,SAAA,CAC3DjB,cAAC4P,IAAU,CACTC,KAAM7P,cAACiS,KAAU,IACjBxJ,QAAQ,UACR,aAAY,sBAEdzI,cAAC4P,IAAU,CACTzP,QAAS4Q,EACTlB,KACE3G,EAASlJ,cAACwS,KAAS,CAACd,EAAG,EAAGH,EAAG,IAAQvR,cAACyS,KAAa,CAACf,EAAG,EAAGH,EAAG,IAE/D9I,QAAQ,UACR,aAAY,4BAIlB9E,eAAC+O,KAAQ,CAACC,GAAIzJ,EAAQ0J,gBAAc,EAAA3R,SAAA,CAClC0C,eAACc,IAAK,CAACgM,GAAI,EAAGC,GAAI,EAAG7M,UAAU,MAAME,MAAM,SAASW,QAAS,EAAEzD,SAAA,CAC7DjB,cAACC,IAAM,CACL4R,KAAM,EACNpJ,QAAS,UACTvI,YAAa,OACbkE,KAAK,KACLjE,QAAUiR,OAAmBiB,EAAVlB,EAAqBlQ,SAEtCmQ,EAA4D,WAAA9T,OAAeuC,GAAjEwR,EAAU,sBAAwB,mBAEhDrR,cAACoP,GAAiB,CAACmD,YAAY,gBAEjCvS,cAACmD,IAAG,CACFwN,YAAa,QACbc,aAAa,MACbZ,YAAarB,YAAkB,WAAY,YAAYvO,SAEtD+O,GAAU7J,KAAI,CAACiK,EAAS9I,IACvBtH,cAACuQ,GAAa,CAACH,QAASA,GAAc9I,aA7G3BC,KAmHvB,E,oBCzBesL,OAhJGpT,IAAkD,IAAjD,OAAEyJ,EAAM,QAAEC,EAAO,cAAEzJ,EAAa,QAAEC,GAASF,EAC1D,MAAM,QAAEI,EAAO,QAAEC,GAAYC,cACvByJ,EAAqB7I,6CACrBmS,EAAcnS,8CACbI,EAAOgS,GAAYpN,mBAAS,KAC5B2D,EAAUC,GAAe5D,mBAAS,QAClCqN,EAAYC,GAAiBtN,oBAAS,GACvCuN,EAAQC,eAEdrN,qBAAU,KACiB1F,WACnB,IAAKP,IAAYC,EAAS,OAC1B,MAAMQ,EAASR,EAAQS,UAAUV,GAC3BuT,EAAe,IAAI3S,IAAOC,SAASoS,EAAaO,GAAS/S,GACzDgT,QAAkBF,EAAaE,UAAUzT,EAAS2J,GACxDyJ,EAAcK,EAAUC,GAAG9S,IAAO+F,MAAMqE,WAAW9J,GAAS,MAAM,EAEtEyS,EAAgB,GACjB,CAAC3T,EAASC,EAASiB,EAAO+R,EAAatJ,IA+F1C,OACI7F,eAAC8F,KAAK,CAACP,OAAQA,EAAQC,QAASA,EAAQlI,SAAA,CACpCjB,cAAC0J,KAAY,IACb/F,eAACgG,KAAY,CAAA1I,SAAA,CACTjB,cAAC4J,KAAW,CAAA3I,SAAC,kBACbjB,cAAC6J,KAAgB,IACjBlG,eAACmG,KAAS,CAAA7I,SAAA,CACN0C,eAACoG,KAAW,CAAA9I,SAAA,CACRjB,cAACgK,KAAS,CAAA/I,SAAC,mBACXjB,cAACiK,KAAK,CAAClJ,MAAOA,EAAOoJ,SAAWpB,GAAMgK,EAAShK,EAAEzH,OAAOP,OAAQqJ,YAAY,4BAEhFzG,eAACoG,KAAW,CAAC1B,GAAI,EAAEpH,SAAA,CACfjB,cAACgK,KAAS,CAAA/I,SAAC,aACX0C,eAAC0G,KAAM,CAACtJ,MAAOuI,EAAUa,SAAWpB,GAAMQ,EAAYR,EAAEzH,OAAOP,OAAOE,SAAA,CAClEjB,cAAA,UAAQe,MAAM,MAAKE,SAAC,aACpBjB,cAAA,UAAQe,MAAM,KAAIE,SAAC,WACnBjB,cAAA,UAAQe,MAAM,KAAIE,SAAC,YACnBjB,cAAA,UAAQe,MAAM,KAAIE,SAAC,aACnBjB,cAAA,UAAQe,MAAM,KAAIE,SAAC,sBAI/B0C,eAAC2G,KAAW,CAAArJ,SAAA,EACN+R,GAAchT,cAACC,IAAM,CAACC,YAAY,OAAOqK,GAAI,EAAGpK,QA5F5CC,UAClB,IACI,MAAME,EAASR,EAAQS,UAAUV,GAC3BuT,EAAe,IAAI3S,IAAOC,SAASoS,EAAaO,GAAS/S,GACzDmL,QAAW2H,EAAaK,QAAQjK,EAAoB/I,IAAO+F,MAAMqE,WAAW9J,UAC5E0K,EAAGzK,OACTiS,GAAc,GACdC,EAAM,CACFhR,MAAO,sBACPwR,YAAa,6BACbnW,OAAQ,UACR+L,SAAU,IACVqK,YAAY,GAEpB,CAAE,MAAOpX,GACLC,QAAQD,MAAM,mBAAoBA,GAClC2W,EAAM,CACFhR,MAAO,kBACPwR,YAAa,gCACbnW,OAAQ,QACR+L,SAAU,IACVqK,YAAY,GAEpB,GAqEqF1S,SAAC,YAC1EjB,cAACC,IAAM,CAACC,YAAY,QAAQC,QAnElBC,UACtB,GAAK4S,EAWL,IACI,MAAM1S,EAASR,EAAQS,UAAUV,GAC3B8K,EAAiB,IAAIlK,IAAOC,SAAS8I,EAAoB5I,EAAWN,GACpEsT,EAjEmBC,MAC7B,IAAIC,EACJ,OAAQxK,GACJ,IAAK,MAeL,QACIwK,EAAe,YAbnB,IAAK,KACDA,EAAe,OACf,MACJ,IAAK,KACDA,EAAe,OACf,MACJ,IAAK,KACDA,EAAe,OACf,MACJ,IAAK,KACDA,EAAe,QAKvB,OAAOxI,KAAKC,MAAMR,KAAKC,MAAQ,KAAQ8I,CAAY,EA4CvBD,GAClBpI,QAAWd,EAAeoJ,iBAC5BrU,EACAC,EACAc,IAAO+F,MAAMqE,WAAW9J,GACxB6S,SAEEnI,EAAGzK,OACTmI,IACA+J,EAAM,CACFhR,MAAO,+BACPwR,YAAa,8BACbnW,OAAQ,UACR+L,SAAU,IACVqK,YAAY,GAEpB,CAAE,MAAOpX,GACLC,QAAQD,MAAM,2BAA4BA,GAC1C2W,EAAM,CACFhR,MAAO,eACPwR,YAAa,gCACbnW,OAAQ,QACR+L,SAAU,IACVqK,YAAY,GAEpB,MAtCIT,EAAM,CACFhR,MAAO,eACPwR,YAAa,yCACbnW,OAAQ,UACR+L,SAAU,IACVqK,YAAY,GAiCpB,EA2BmE1S,SAAC,0BAG5D,EClBD+S,OA9HKvU,IAAiE,IAAhE,OAAEyJ,EAAM,QAAEC,EAAO,cAAEzJ,EAAa,QAAEC,EAAO,OAAE0N,EAAM,MAAEtM,GAAOtB,EAC3E,MAAM,QAAEI,EAAO,QAAEC,GAAYC,cACvBmT,EAAQC,gBACPH,EAAYC,GAAiBtN,oBAAS,GACvC6D,EAAqB7I,6CAG3BmF,qBAAU,KACa1F,WACf,GAAKN,GAAYJ,GAAkBC,EACnC,IACI,MAAMa,EAAW,IAAIC,IAAOC,SAAShB,EAAegL,GAAW5K,GACzDnC,QAAc6C,EAASyT,QAAQtU,GACrCnD,QAAQgO,IAAI,2BAADlN,OAA4BqC,EAAO,MAAMhC,EACxD,CAAE,MAAOpB,GACLC,QAAQD,MAAM,4BAA6BA,EAC/C,GAEJ2X,EAAY,GACb,CAACpU,EAASJ,EAAeC,IAG5BmG,qBAAU,KACgB1F,WAClB,IAAKP,IAAYC,IAAYJ,EAAe,OAC5C,MAAMc,EAAW,IAAIC,IAAOC,SAAShB,EAAegL,GAAW5K,EAAQS,aACjEyS,QAAmBxS,EAASyK,iBAAiBpL,EAAS2J,GAC5DyJ,EAAcD,EAAW,EAE7BmB,EAAe,GAChB,CAACtU,EAASC,EAASJ,EAAe8J,IAwErC,OACI7F,eAAC8F,KAAK,CAACP,OAAQA,EAAQC,QAASA,EAAQlI,SAAA,CACpCjB,cAAC0J,KAAY,IACb/F,eAACgG,KAAY,CAAA1I,SAAA,CACTjB,cAAC4J,KAAW,CAAA3I,SAAC,iBACbjB,cAAC6J,KAAgB,IACjB7J,cAAC8J,KAAS,CAAA7I,SAAC,gDAGX0C,eAAC2G,KAAW,CAAArJ,SAAA,EACN+R,GACEhT,cAACC,IAAM,CAACC,YAAY,OAAOqK,GAAI,EAAGpK,QAjFhCC,UAClB,MAAMI,EAAW,IAAIC,IAAOC,SAAShB,EAAegL,GAAW5K,EAAQS,aACvE,IACI,MAAMkL,QAAWjL,EAAS2K,kBAAkB3B,GAAoB,SAC1DiC,EAAGzK,OACTiS,GAAc,GACdC,EAAM,CACFhR,MAAO,sBACPwR,YAAa,qDACbnW,OAAQ,UACR+L,SAAU,IACVqK,YAAY,GAEpB,CAAE,MAAOpX,GACL2W,EAAM,CACFhR,MAAO,kBACPwR,YAAY,UAADpW,OAAYf,EAAME,SAC7Bc,OAAQ,QACR+L,SAAU,IACVqK,YAAY,GAEpB,GA4DyE1S,SAAC,qBAI9DjB,cAACC,IAAM,CAACC,YAAY,QAAQC,QA7DlBC,UACtB,IAAK4S,EAQD,YAPAE,EAAM,CACFhR,MAAO,eACPwR,YAAa,oDACbnW,OAAQ,UACR+L,SAAU,IACVqK,YAAY,IAIpB,MAAMhJ,EAAiB,IAAIlK,IAAOC,SAAS8I,EAAoB5I,EAAWd,EAAQS,aAClF,IACI/D,QAAQgO,IAAI,mCAAoC,CAC5C9K,gBACAC,UACA0N,SACAtM,MAAON,IAAO+F,MAAM4N,YAAYrT,EAAO,SAG3C,MAAM0K,QAAWd,EAAe0J,kBAC5B3U,EACAC,EACA0N,EACA5M,IAAO+F,MAAM8N,WAAWvT,EAAM0M,WAAY,cAExChC,EAAGzK,OACTmI,IACA+J,EAAM,CACFhR,MAAO,8BACPwR,YAAa,2DACbnW,OAAQ,UACR+L,SAAU,IACVqK,YAAY,GAEpB,CAAE,MAAOpX,GACL2W,EAAM,CACFhR,MAAO,sBACPwR,YAAY,UAADpW,OAAYf,EAAME,SAC7Bc,OAAQ,QACR+L,SAAU,IACVqK,YAAY,GAEpB,GAkBoEY,YAAavB,EAAW/R,SAAC,yBAKrF,EC8EDuT,OAjMGA,KAAO,IAADC,EACpB,IAAI,gBAAErL,EAAe,QAAEzJ,GAAY+U,cACnCtL,EAAkBA,EAAgB8D,cAClC,MAAM,OAAEkE,EAAM,QAAEvR,GAAYE,eACrB4U,EAAYC,GAAiBjP,mBAAS,CAAC,IACvCkP,EAAUC,GAAenP,oBAAS,IAClCoP,EAAUC,GAAerP,oBAAS,IAClCsP,EAASC,GAAcvP,oBAAS,IAC/BuD,OAAQiM,EAAaC,OAAQC,EAAalM,QAASmM,GAAiBtE,gBACpE9H,OAAQqM,EAAYxE,SAAUyE,GAAiBxE,gBAChDyE,EAAaC,GAAkB/P,mBAAS,OACvCuD,OAAQyM,EAAmBP,OAAQQ,EAAmBzM,QAAS0M,GAAuB7E,gBACtF9H,OAAQ4M,EAAa/E,SAAUgF,GAAkB/E,gBAEnD,KAAExT,GAAS+H,YAAStH,EAA2B,CACjD+O,UAAW,CAAEtN,cAAe0J,EAAiBzJ,cAGzCnC,KAAM4P,GAAa7H,YAAShH,EAAyB,CACzDyO,UAAW,CAAEtN,cAAe0J,EAAiBzJ,cAIzCnC,KAAMwY,GAAczQ,YAAS7G,EAAsB,CACvDsO,UAAW,CAAEtN,cAAe0J,EAAiBzJ,aAI3CsW,EAAcC,IAChB,MAAMC,EAAO,IAAIpL,KAAiB,IAAZmL,GACtB,OAAOC,EAAKC,mBAAmB,SAAW,IAAMD,EAAKE,mBAAmB,QAAQ,EAS9EC,EAAiB/O,GAAO,GAAAjK,OAAQiK,EAAQgP,MAAM,EAAG,GAAE,OAAAjZ,OAAMiK,EAAQgP,OAAO,IAGxEC,EAAoB5C,IACtB,MAEM6C,EAFa,IAAI1L,KAAuB,IAAlB6I,GAChB,IAAI7I,KAEV2L,EAAOpL,KAAKC,MAAMkL,EAAI,OACtBE,EAAQrL,KAAKC,MAAOkL,EAAI,KAAuB,IAC/CG,EAAUtL,KAAKC,MAAOkL,EAAO,IAAO,GAAM,IAEhD,OAAIC,EAAO,EAAS,GAANpZ,OAAUoZ,EAAI,SACxBC,EAAQ,EAAS,GAANrZ,OAAUqZ,EAAK,UAC1BC,EAAU,EAAS,GAANtZ,OAAUsZ,EAAO,YAC3B,SAAS,EA6CpB,OA1CA9Q,qBAAU,KACFtI,GAAQA,EAAKuI,UAAYvI,EAAKuI,SAAStE,OAAS,GAChDqT,GAAY,GACZE,EAAYnV,GAAWrC,EAAKuI,SAAS,GAAGkH,OAAOC,gBAAkBrN,EAAQqN,iBAEzE4H,GAAY,GACZE,GAAY,GAChB,GACD,CAACxX,EAAMqC,IAEViG,qBAAU,KACkB1F,WACpB,GAAKgJ,GAAoBzJ,EAEzB,IACI,MAAMyG,EAAM,IAAIxJ,EAAI,UAAWwM,EAAiBzJ,GAC1CzC,QAAiBkJ,EAAIlJ,WAErB0C,EAAQiV,GAAYrX,EAAKuI,SAAS,GAAKtF,IAAO+F,MAAM4N,YAAY5W,EAAKuI,SAAS,GAAGnG,MAAO,SAAW,KAEzG,IAAIjC,EAAQ,KACRyT,IACAzT,QAAcyI,EAAIzI,QAClBuX,EAAWrV,GAAWlC,EAAMuP,gBAAkBrN,EAAQqN,gBAG1D0H,EAAc,IACP1X,EACHS,QACAD,MAAO0I,EAAI1I,QACXkC,UAEJpD,QAAQgO,IAAIpE,EAAI1I,QACpB,CAAE,MAAOnB,GACLC,QAAQD,MAAM,8BAA+BA,EACjD,GAGJsa,EAAiB,GAClB,CAACzN,EAAiBzJ,EAASnC,EAAMqX,EAAUzD,EAAQvR,IAIlD8D,eAACmT,IAAM,CAACpS,QAAS,EAAGuC,EAAG,GAAIlD,MAAM,UAAS9C,SAAA,CACtCjB,cAACmD,IAAG,CAAAlC,SACA0C,eAACuD,IAAI,CAACxC,QAAS,EAAGqS,cAAa,eAAkB5H,oBAAqB,YAAYlO,SAAA,CAC9E0C,eAACqT,IAAQ,CAAC/P,EAAG,EAAEhG,SAAA,CACXjB,cAAC+H,IAAK,CAACC,IAAK2M,EAAWjX,MAAOuK,IAAK0M,EAAWrO,KAAMoI,aAAa,MAAMvG,UAAU,UACjFnI,cAACuE,IAAI,CAACC,SAAS,MAAM8D,WAAW,OAAMrH,SAAE0T,EAAWrO,OAClDqO,GAAkC,MAApBA,EAAWhX,MAAgBgG,eAACY,IAAI,CAACC,SAAS,KAAIvD,SAAA,CAAC,aAC/C0T,EAAWhX,MAAM2U,UAAU,EAAG,GAAG,MAAIqC,EAAWhX,MAAM2U,UAAU,OACrE,GACVtS,cAACuE,IAAI,CAACC,SAAS,KAAIvD,SAAE0T,EAAWjB,cAG/BtC,GAAUuD,EAAW/U,OAASiV,IAAaE,GACxC/U,cAACT,EAAM,CAACG,cAAe0J,EAAiBzJ,QAASA,EAASC,MAAOa,IAAO+F,MAAM8N,WAAWK,EAAW/U,MAAO,WAG7GwR,IAAW6D,KAAaJ,IAAaE,IACnC/U,cAACC,IAAM,CAACC,YAAY,OAAOmI,GAAG,IAAIlI,QAASkV,EAAYpU,SAAC,eAK5DjB,cAAC6S,GAAS,CAAC3J,OAAQiM,EAAahM,QAASmM,EAAc5V,cAAe0J,EAAiBzJ,QAASA,OAEpGK,cAACgX,IAAQ,CAAC/P,EAAG,EAAEhG,SACXjB,cAACkH,IAAI,CAACC,gBAAgB,iBAAiBC,IAAK,EAAEnG,SACpB,QADoBwT,EACzCE,EAAWsC,kBAAU,IAAAxC,OAAA,EAArBA,EAAuBtO,KAAI,CAAC+Q,EAAM5P,IAC/B3D,eAACR,IAAG,CAAa8D,EAAE,IAAIQ,OAAO,KAAKC,YAAY,MAAKzG,SAAA,CAChDjB,cAACuE,IAAI,CAAC+D,WAAW,OAAMrH,SAAEiW,EAAKC,aAC9BnX,cAACuE,IAAI,CAAAtD,SAAEiW,EAAKnW,UAFNuG,cAW9B3D,eAACmT,IAAM,CAAC/S,MAAO,UAAU9C,SAAA,CACrB0C,eAAC1D,IAAM,CAACE,QAASqV,EAAavU,SAAA,CAAEsU,EAAa,mBAAqB,mBAAmB,KAAGnI,EAAmB,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUpB,KAAKvK,OAAS,GAAG,OAC9HzB,cAAC0S,KAAQ,CAACC,GAAI4C,EAAY3C,gBAAc,EAAA3R,SACpCjB,cAAC8W,IAAM,CAACpS,QAAS,EAAEzD,SACN,OAARmM,QAAQ,IAARA,OAAQ,EAARA,EAAUpB,KAAK7F,KAAI,CAACyH,EAAKtG,IACtB3D,eAACR,IAAG,CAAa8D,EAAG,EAAGQ,OAAO,KAAKC,YAAY,MAAKzG,SAAA,CAChD0C,eAACY,IAAI,CAAAtD,SAAA,CAAC,UAAQR,IAAO+F,MAAMC,YAAYmH,EAAI7M,OAAO,UAClD4C,eAACY,IAAI,CAAAtD,SAAA,CAAC,YAAUuV,EAAiB5I,EAAIgG,oBACrCjQ,eAACY,IAAI,CAAAtD,SAAA,CAAC,WAASqV,EAAc1I,EAAIP,WAChC4H,GACGjV,cAACC,IAAM,CAACmE,KAAK,KAAKlE,YAAY,OAAOC,QAASA,IAlHrDyN,KACrB8H,EAAe9H,GACfgI,GAAmB,EAgH6DwB,CAAgBxJ,GAAK3M,SAAC,mBALxEqG,SAarBmO,GAAeR,GACZjV,cAACgU,GAAW,CACR9K,OAAQyM,EACRxM,QAAS0M,EACTnW,cAAe+V,EAAY/V,cAC3BC,QAASA,EACT0N,OAAQoI,EAAYpI,OACpBtM,MAAO0U,EAAY1U,QAK3B4C,eAAC1D,IAAM,CAACE,QAAS4V,EAAc9U,SAAA,CAAE6U,EAAc,qBAAuB,sBAAsB,KAAGE,EAAYA,EAAUrP,MAAMlF,OAAS,GAAG,OACvIzB,cAAC0S,KAAQ,CAACC,GAAImD,EAAalD,gBAAc,EAAA3R,SACpC+U,GAAaA,EAAUrP,MAAMlF,OAAS,EACnCzB,cAAC8W,IAAM,CAACpS,QAAS,EAAGX,MAAO,UAAU9C,SAChC+U,EAAUrP,MAAMR,KAAI,CAACU,EAAMS,IACxB3D,eAACR,IAAG,CAAa8D,EAAG,EAAGQ,OAAO,KAAKC,YAAY,MAAKzG,SAAA,CAChD0C,eAACY,IAAI,CAAC+D,WAAY,OAAOrH,SAAA,CAAC,UAAQR,IAAO+F,MAAMC,YAAYI,EAAKjH,OAAO,UACvE+D,eAACY,IAAI,CAAAtD,SAAA,CAAC,WAASqV,EAAczP,EAAKoG,WAClCtJ,eAACY,IAAI,CAAAtD,SAAA,CAAC,UAAQqV,EAAczP,EAAKwQ,UACjC1T,eAACY,IAAI,CAAAtD,SAAA,CAAC,YAAUgV,EAAWpP,EAAKqP,cAChClW,cAACsX,IAAU,CAACpH,KAAI,mCAAA5S,OAAqCuJ,EAAK7J,GAAGua,MAAM,KAAK,IAAMC,YAAU,EAAAvW,SAAC,uBALnFqG,OAYlBtH,cAACuE,IAAI,CAAAtD,SAAC,oBAIb,EChFFwW,OAzHIA,KAAO,IAADC,EACrB,IAAI,gBAAEtO,GAAoBsL,cAE1BtL,EAAkBA,EAAgB8D,cAElC,MAAOyK,EAAgBC,GAAqBjS,mBAAS,KAC9CI,EAAUmG,GAAevG,mBAAS,IACnCP,EAAWC,eAIT7H,KAAMqa,GAAwBtS,YAAS3G,EAAsB,CACjEoO,UAAW,CAAEhQ,GAAIoM,KAGrB5M,QAAQgO,IAAI,yBAA0BqN,GAGtC,MAAQra,KAAMsa,GAAiBvS,YAASxH,EAA8B,CAClEiP,UAAW,CAAEtN,cAAe0J,KAEhC5M,QAAQgO,IAAI,iBAAkBsN,GAG9B,MAAQta,KAAMua,GAAuBxS,YAAStG,EAAqB,CAC/D+N,UAAW,CAAEhQ,GAAIoM,KAGrBtD,qBAAU,KACN,GAAIiS,GAAsBA,EAAmBhb,WAAY,CACrD,MAAMuJ,EAAOyR,EAAmBhb,WAAWuJ,KACvCA,IACA9J,QAAQgO,IAAI,mBAAoBlE,GAChCsR,EAAkBtR,IAEtB9J,QAAQgO,IAAI,mBAAoBuN,EACpC,IACD,CAACA,IAEJjS,qBAAU,KACN,MAAMkS,EAAmB1M,KAAKC,MAAMR,KAAKC,MAAQ,KACjD,GAAI8M,GAAgBA,EAAa/R,SAAU,CACvCvJ,QAAQgO,IAAI,+BACkBpK,WAC1B,MAAM6X,QAAwBhS,QAAQC,IAClC4R,EAAa/R,SACRmI,QAAO7H,GAAW6R,SAAS7R,EAAQuN,iBAAmBoE,IACtD7R,KAAI/F,UACD,IACI,MAAMgG,EAAM,IAAIxJ,EAAI,UAAWwM,EAAiB/C,EAAQ1G,SAClDzC,QAAiBkJ,EAAIlJ,WAC3B,MAAO,IACAmJ,EACH3I,MAAO0I,EAAI1I,QACX4I,KAAMpJ,EAASoJ,KAEvB,CAAE,MAAO/J,GAEL,OADAC,QAAQD,MAAM,wCAAyC8J,EAAS9J,GACzD,IACX,MAGZC,QAAQgO,IAAI,kCAAmCyN,GAC/C/L,EAAY+L,EAAgB/J,QAAO7H,GAAuB,OAAZA,IAAkB,EAGpEK,EACJ,IACD,CAACoR,EAAc1O,IAOlB,OACIpJ,cAACmD,IAAG,CAAC8D,EAAG,EAAEhG,SACN0C,eAACmT,IAAM,CAACpS,QAAS,EAAGX,MAAM,UAAS9C,SAAA,CAC/B0C,eAACC,IAAI,CAACuU,eAAe,gBAAgBC,WAAW,SAAQnX,SAAA,CACpDjB,cAACuE,IAAI,CAACC,SAAS,MAAM8D,WAAW,OAAMrH,SAAE0W,IACxChU,eAACR,IAAG,CAACkB,UAAU,QAAOpD,SAAA,CAClB0C,eAACY,IAAI,CAACC,SAAS,MAAM8D,WAAW,OAAMrH,SAAA,CAAER,IAAO+F,MAAMC,aAA+B,OAAnBoR,QAAmB,IAAnBA,GAAuC,QAApBH,EAAnBG,EAAqBQ,gBAAgB,UAAE,IAAAX,OAApB,EAAnBA,EAAyCY,oBAAqB,KAAK,UACpItY,cAACuE,IAAI,CAACC,SAAS,KAAKf,MAAM,WAAUxC,SAAC,uBAI7C0C,eAAC4E,IAAI,CAACC,UAAQ,EAACC,QAAQ,WAAUxH,SAAA,CAC7BjB,cAAC0I,IAAO,CAACpE,GAAG,MAAKrD,SACbjB,cAAC2I,IAAG,CAAA1H,SAAC,eAET0C,eAACiF,IAAS,CAAA3H,SAAA,CACNjB,cAAC6I,IAAQ,CAAA5H,SACLjB,cAACkH,IAAI,CAACC,gBAAgB,iBAAiBC,IAAK,EAAEnG,SACzC8E,EAASI,KAAI,CAACE,EAASiB,IACpB3D,eAACR,IAAG,CAAa8D,EAAG,EAAGQ,OAAO,KAAKC,YAAY,MAAMG,OAAO,UAAU1H,QAASA,KAAMoY,OAvB7F5Y,EAuB4G0G,EAAQ1G,aAtBxIyF,EAAS,eAAD9H,OAAgB8L,EAAe,KAAA9L,OAAIqC,IADvBA,KAuB6H,EAAAsB,SAAA,CACjHjB,cAAC+H,IAAK,CAACC,IAAK3B,EAAQ3I,MAAOuK,IAAK5B,EAAQC,KAAM4B,QAAQ,QAAQC,UAAU,UACxEnI,cAACuE,IAAI,CAAC8D,GAAI,EAAEpH,SAAEoF,EAAQC,OACtB3C,eAACY,IAAI,CAAAtD,SAAA,CAAC,UAAQR,IAAO+F,MAAMC,YAAYJ,EAAQzG,OAAO,UAEtDI,cAAA,OAAKG,QAAU4I,GAAMA,EAAEC,kBAAkB/H,SACrCjB,cAACT,EAAM,CACHG,cAAe0J,EACfzJ,QAAS0G,EAAQ1G,QACjBC,MAAOyG,EAAQzG,YATjB0H,SAgBtBtH,cAAC6I,IAAQ,CAAA5H,SACLjB,cAACuE,IAAI,CAAAtD,SAAC,oJAMpB,E,8BCvHCuX,OAPA,IAAIC,KAAa,CAC5BC,IAAK,sEACLC,MAAO,IAAIC,OCSf,SAASC,GAAWC,GAClB,OAAO,IAAIrY,IAAOsY,UAAUC,aAAaF,EAC3C,CAuBeG,OArBf,WACE,OACEjZ,cAACkZ,KAAc,CAACV,OAAQA,GAAOvX,SAC7BjB,cAACmZ,IAAc,CAACC,MAAOA,IAAMnY,SAC3BjB,cAACqZ,IAAiB,CAACR,WAAYA,GAAW5X,SACxC0C,eAAC2V,IAAM,CAAArY,SAAA,CACLjB,cAAC8Q,GAAM,IACPnN,eAAC4V,IAAM,CAAAtY,SAAA,CACLjB,cAACwZ,IAAK,CAACC,KAAK,IAAIC,QAAS1Z,cAACmF,GAAI,MAC9BnF,cAACwZ,IAAK,CAACC,KAAK,UAAUC,QAAS1Z,cAAC6L,GAAM,MACtC7L,cAACwZ,IAAK,CAACC,KAAK,+BAA+BC,QAAS1Z,cAACyX,GAAU,MAC/DzX,cAACwZ,IAAK,CAACC,KAAK,wCAAwCC,QAAS1Z,cAACwU,GAAS,iBAQrF,ECxBemF,OAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzd,MAAKqD,IAAkD,IAAjD,OAAEqa,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASza,EACpEqa,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EAAY,GAExB,E,UCFFO,IAASC,OACPzW,eAAC0W,aAAU,CAAApZ,SAAA,CACTjB,cAACsa,IAAe,IAChBta,cAACiZ,GAAG,OAENsB,SAASC,eAAe,SAM1Bte,OAKAyd,I,mCCvBA,mFAKO,MAAMc,EAAW,IAAIC,IAAkB,CAAEC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,aAE7E,SAAS5a,IACd,MAAM,SAAE6a,EAAQ,WAAEC,EAAU,OAAEzJ,EAAM,QAAEvR,EAAO,QAAEC,EAAO,QAAEuR,GAAYyJ,cAkCpE,OARAhV,qBAAU,KACR2U,EAASM,eAAe3e,MAAM2e,IACxBA,GACFH,EAASH,EACX,GACA,GACD,CAACG,IAEG,CAAEzJ,QAhCO/Q,UACd,UACQwa,EAASH,EACjB,CAAE,MAAOO,GACPxe,QAAQgO,IAAIwQ,EACd,GA2BgBC,WAjBC7a,UACjB,IACEya,GACF,CAAE,MAAOG,GACPxe,QAAQgO,IAAIwQ,EACd,GAY4B5J,SAAQvR,UAASC,UAASuR,UAAS6J,gBAxBzC9a,UACtB,GAAKO,EACL,OAAO,IAAIF,IAAOsY,UAAUoC,gBAC1Bxa,2BACD,EAqBL,C","file":"static/js/main.4c2a0e4e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process && process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      if(!process) return\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const whitelist = {\r\n    \"Nuggets\": \"0xdcb5bE2582A7B10ECF07B5A56c1bED524B7d90d0\", //9194\r\n    \"Blast Riders\": \"0x85668115c044e57a1d57e05eb2e2ec9983c0a566\", //http://localhost:3000/collection/0x85668115c044e57a1d57e05eb2e2ec9983c0a566/43\r\n    \"Ape\": \"0x6a7a53fa2c37a86be698f5c905aca5f114348dbe\", //556\r\n    \"zkOkayDog\": \"0xf1b2fe759e3cccf89e16497d5b3f8a9db6cfba76\", //2010\r\n    \"Blast Knives\": \"0xf6c766e43c69a25f4e225a4f7e606f9fdb1d94a0\" //373\r\n};\r\n\r\nexport default whitelist;\r\n","import axios from \"axios\";\r\n\r\nconst middlewareBaseURL = 'https://rooni.site'; // Replace with your middleware's base URL this is a running on render free for testing\r\n\r\nclass Nft {\r\n    constructor(chain, collection, id) {\r\n        this.chain = chain\r\n        this.collection = collection\r\n        this.id = id\r\n    }\r\n\r\n    async metadata() {\r\n        // Fetch metadata from your middleware\r\n        const metadataResponse = await axios.get(`${middlewareBaseURL}/metadata/${this.chain}/${this.collection}/${this.id}`);\r\n        if (metadataResponse.status !== 200 || !metadataResponse.data) {\r\n            throw new Error('Failed to fetch metadata from middleware');\r\n        }\r\n        return metadataResponse.data;\r\n    }\r\n\r\n    image() {\r\n        return `${middlewareBaseURL}/image/${this.chain}/${this.collection}/${this.id}`\r\n    }\r\n\r\n    async owner() {\r\n        const metadataResponse = await axios.get(`${middlewareBaseURL}/owner/${this.chain}/${this.collection}/${this.id}`);\r\n        if (metadataResponse.status !== 200 || !metadataResponse.data) {\r\n            throw new Error('Failed to fetch metadata from middleware');\r\n        }\r\n        return metadataResponse.data.owner;\r\n    }\r\n}\r\n\r\nexport default Nft","import { gql } from '@apollo/client';\r\n\r\n// Query for getting all listed NFTs\r\nexport const GET_ALL_LISTED_NFTS = gql`\r\n  query GetAllListedNFTs {\r\n    listings(where: {status: \"Active\"}) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      seller\r\n      price\r\n      expireTimestamp\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n//Get all Active Listing for a specific NFT Contract Addresss\r\nexport const GET_LISTINGS_FOR_NFT_ADDRESS = gql`\r\n  query GetListingsForNFTAddress($erc721Address: Bytes!) {\r\n    listings(where: {erc721Address: $erc721Address, status: \"Active\"}) {\r\n      id\r\n      tokenId\r\n      seller\r\n      price\r\n      expireTimestamp\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n// Query for getting all active listing based on erc721Address and tokenId\r\nexport const GET_ACTIVE_LISTING_BY_NFT = gql`\r\n  query GetActiveListingByNFT($erc721Address: Bytes!, $tokenId: BigInt!) {\r\n    listings(where: {erc721Address: $erc721Address, tokenId: $tokenId, status: \"Active\"}) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      seller\r\n      price\r\n      expireTimestamp\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n// Query for getting all listed NFTs for a specific address\r\nexport const GET_LISTED_NFTS_FOR_ADDRESS = gql`\r\n  query GetListedNFTsForAddress($seller: Bytes!) {\r\n    listings(where: {seller: $seller, status: \"Active\"}) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      seller\r\n      price\r\n      expireTimestamp\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n// Query for getting all bids made by a specific address\r\nexport const GET_BIDS_BY_ADDRESS = gql`\r\n  query GetBidsByAddress($bidder: Bytes!) {\r\n    bids(where: {bidder: $bidder}) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      bidder\r\n      value\r\n      expireTimestamp\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n// Query for getting all active bids\r\nexport const GET_ALL_ACTIVE_BIDS = gql`\r\n  query GetAllActiveBids {\r\n    bids(where: {status: \"Active\"}) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      bidder\r\n      value\r\n      expireTimestamp\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n// Query for getting all active bids based on erc721Address and tokenId\r\nexport const GET_ACTIVE_BIDS_FOR_NFT = gql`\r\n  query GetActiveBidsForNFT($erc721Address: String!, $tokenId: String!) {\r\n    bids(where: {\r\n      erc721Address: $erc721Address, \r\n      tokenId: $tokenId, \r\n      status: \"Active\"\r\n    }) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      bidder\r\n      value\r\n      expireTimestamp\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n//get all sold for a specific nft\r\nexport const GET_ALL_SOLD_FOR_NFT = gql`\r\n  query GetAllSoldForNFT($erc721Address: String!, $tokenId: String!) {\r\n    sales(where: {\r\n      erc721Address: $erc721Address,\r\n      tokenId: $tokenId\r\n    }) {\r\n      id\r\n      buyer\r\n      seller\r\n      price\r\n      timestamp\r\n      tokenId\r\n      erc721Address\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n// GraphQL query to fetch all sold NFTs, sorted from latest to oldest\r\nexport const GET_ALL_SOLD_NFTS_RANKED = gql`\r\n  query GetAllSoldNFTsRanked {\r\n    sales(where: {status: \"Sold\"}, orderBy: timestamp, orderDirection: desc) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      buyer\r\n      seller\r\n      price\r\n      timestamp\r\n    }\r\n  }\r\n`;\r\n\r\n//get total volume trade for a collection\r\nexport const GET_COLLECTION_STATS = gql`\r\n  query GetCollectionStats($id: ID!) {\r\n    collectionStats(where: {id: $id}) {\r\n      id\r\n      floorPrice\r\n      totalVolumeTraded\r\n      totalVolumeTradedWETH\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n// Get  the ALL nfts owned by a specific user/wallet\r\nexport const GET_ALL_NFTS_OWNED_BY_USER = gql`\r\n  query GetAllNFTsOwnedByUser($owner: Bytes!) {\r\n    erc721S(where: {owner: $owner}) {\r\n      address\r\n      tokenId\r\n      owner\r\n    }\r\n  }\r\n`;\r\n\r\n//query to get nft collection name\r\nexport const GET_COLLECTION_NAME = gql`\r\nquery GetCollectionName($id: ID!) {\r\n  collection(id: $id) {\r\n    id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\n\r\n//query to get the newest listing\r\nexport const GET_MOST_RECENT_LISTING = gql`\r\n  query GetMostRecentListing {\r\n    listings(orderBy: listedTimestamp, orderDirection: desc) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      seller\r\n      price\r\n      expireTimestamp\r\n      listedTimestamp\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\n//query for getting most recently sold\r\nexport const GET_MOST_RECENT_SOLD = gql`\r\n  query GetMostRecentSold {\r\n    sales(orderBy: timestamp, orderDirection: desc) {\r\n      id\r\n      erc721Address\r\n      tokenId\r\n      buyer\r\n      seller\r\n      price\r\n      serviceFee\r\n      royaltyFee\r\n      timestamp\r\n      status\r\n      txid\r\n    }\r\n  }\r\n`;","import React from 'react';\r\nimport { Button } from '@chakra-ui/react';\r\nimport { ethers } from 'ethers';\r\nimport { useWallet } from '../../hooks/useWallet';\r\nimport MarketABI from '../../abi/market.json'; // Make sure this path is correct\r\n\r\nconst BuyNow = ({ erc721Address, tokenId, price }) => {\r\n    const { account, library } = useWallet();\r\n    const marketplaceAddress = process.env.REACT_APP_MARKETPLACE_ADDRESS;\r\n\r\n    const handleBuyNow = async () => {\r\n        if (!account || !library) {\r\n            alert('Please connect your wallet first.');\r\n            return;\r\n        }\r\n\r\n        const signer = library.getSigner(account);\r\n        const contract = new ethers.Contract(marketplaceAddress, MarketABI, signer);\r\n\r\n        try {\r\n            const transaction = await contract.buyToken(erc721Address, tokenId, { value: price });\r\n            await transaction.wait();\r\n            alert('Bought successful!');\r\n        } catch (error) {\r\n            console.error('Transaction failed:', error);\r\n            alert('Transaction failed. See console for details.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Button colorScheme=\"teal\" onClick={handleBuyNow}>\r\n            Buy Now\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default BuyNow;\r\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLightning(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    className: \"w-6 h-6\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLightning);\nexport default __webpack_public_path__ + \"static/media/lightning.448c85ca.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgHeart(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    className: \"w-6 h-6\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgHeart);\nexport default __webpack_public_path__ + \"static/media/heart.e9a902cd.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgBrig(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    className: \"w-6 h-6\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgBrig);\nexport default __webpack_public_path__ + \"static/media/brig.e54ff37f.svg\";\nexport { ForwardRef as ReactComponent };","export default __webpack_public_path__ + \"static/media/background.6a523ea7.png\";","import React from 'react';\r\nimport { Box, Flex, Heading, Text, Stack } from '@chakra-ui/react';\r\nimport { ReactComponent as LightningIcon } from '../assets/icons/lightning.svg';\r\nimport { ReactComponent as HeartIcon } from '../assets/icons/heart.svg';\r\nimport { ReactComponent as AggregateIcon } from '../assets/icons/brig.svg';\r\nimport backgroundImage from '../assets/IMG/background.png';\r\n\r\nconst HeroSection = () => {\r\n    return (\r\n        <Box\r\n            bgImage={`url(${backgroundImage})`}\r\n            bgPosition=\"center\"\r\n            bgRepeat=\"no-repeat\"\r\n            bgSize=\"cover\"\r\n            color=\"white\"\r\n            height=\"lg\"\r\n        >\r\n            <Flex\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                align=\"center\"\r\n                height=\"100%\"\r\n                bg=\"rgba(0, 0, 0, 0.5)\" // semi-transparent overlay\r\n                paddingY=\"8\"\r\n            >\r\n                <Heading as=\"h1\" size=\"2xl\" textAlign=\"center\" mb=\"4\">\r\n                    AN NFT MARKETPLACE FOR COLLECTORS\r\n                </Heading>\r\n                <Text fontSize=\"xl\" textAlign=\"center\" mb=\"8\">\r\n                    SEARCH YOUR FAVORITE NFT COLLECTIONS\r\n                </Text>\r\n                <Stack direction=\"row\" spacing=\"10\" align=\"center\" justify=\"center\">\r\n                    <Flex align=\"center\">\r\n                        <LightningIcon style={{ marginRight: '8px' }} />\r\n                        <Text>FULL ROYALTIES HONORED</Text>\r\n                    </Flex>\r\n                    <Flex align=\"center\">\r\n                        <AggregateIcon style={{ marginRight: '8px' }} /> {/* Use your aggregate icon */}\r\n                        <Text>For ALL COLLECTIONS</Text>\r\n                    </Flex>\r\n                    <Flex align=\"center\">\r\n                        <HeartIcon style={{ marginRight: '8px' }} />\r\n                        <Text>NO FEES FROM COLLECTLE</Text>\r\n                    </Flex>\r\n                </Stack>\r\n            </Flex>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default HeroSection;\r\n","import React, { useEffect, useState } from 'react';\nimport { Box, Grid, Image, Text, Button, Tabs, TabList, TabPanels, Tab, TabPanel, Heading } from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport whitelist from '../components/Whitelist';\nimport Nft from \"../util/Nft\";\nimport { useQuery } from '@apollo/client';\nimport { GET_MOST_RECENT_LISTING, GET_MOST_RECENT_SOLD } from '../graphql/Queries';\nimport { ethers } from 'ethers';\nimport BuyNow from '../components/Market/BuyNow';\nimport HeroSection from '../components/HeroSection';\n\n\n\n// Manually import each image\nimport nuggetsImage from '../assets/IMG/nuggets.png';\nimport blastRidersImage from '../assets/IMG/blast_riders.png';\nimport apeImage from '../assets/IMG/ape.png';\nimport zkOkayDogImage from '../assets/IMG/zkokaydog.png';\nimport blastKnivesImage from '../assets/IMG/blast_knives.png';\n\n// Map each collection name to its corresponding images\nconst images = {\n  Nuggets: nuggetsImage,\n  \"Blast Riders\": blastRidersImage,\n  Ape: apeImage,\n  \"zkOkayDog\": zkOkayDogImage,\n  \"Blast Knives\": blastKnivesImage,\n};\n\nconst Home = () => {\n  const navigate = useNavigate();\n\n  const { data: recentListingsData } = useQuery(GET_MOST_RECENT_LISTING);\n  const { data: recentSalesData } = useQuery(GET_MOST_RECENT_SOLD);\n\n  const [recentListings, setRecentListings] = useState([]);\n  const [recentSales, setRecentSales] = useState([]);\n\n  useEffect(() => {\n    if (recentListingsData && recentListingsData.listings) {\n      const fetchListingsMetadata = async () => {\n        const listingsWithMetadata = await Promise.all(recentListingsData.listings.map(async (listing) => {\n          const nft = new Nft(168587773, listing.erc721Address, listing.tokenId);\n          const metadata = await nft.metadata();\n          return {\n            ...listing,\n            name: metadata.name,\n            image: nft.image(),\n            //price: ethers.utils.formatEther(listing.price)\n            displayPrice: ethers.utils.formatEther(listing.price), // Price for display\n            price: listing.price // Original price in wei for transactions\n          };\n        }));\n        setRecentListings(listingsWithMetadata);\n      };\n      fetchListingsMetadata();\n    }\n  }, [recentListingsData]);\n\n  useEffect(() => {\n    if (recentSalesData && recentSalesData.sales) {\n      const fetchSalesMetadata = async () => {\n        const salesWithMetadata = await Promise.all(recentSalesData.sales.map(async (sale) => {\n          const nft = new Nft(168587773, sale.erc721Address, sale.tokenId);\n          const metadata = await nft.metadata();\n          return {\n            ...sale,\n            name: metadata.name,\n            image: nft.image(),\n            price: ethers.utils.formatEther(sale.price)\n          };\n        }));\n        setRecentSales(salesWithMetadata);\n      };\n      fetchSalesMetadata();\n    }\n  }, [recentSalesData]);\n\n\n  const handleCollectionClick = (address) => {\n    navigate(`/collection/${address}`);\n  };\n  // Function to navigate to NFT detail page\n  const navigateToNFTDetail = (erc721Address, tokenId) => {\n    navigate(`/collection/${erc721Address}/${tokenId}`);\n  };\n\n  return (\n    <>\n      <HeroSection />\n      <Box p={5}>\n        <Grid templateColumns=\"repeat(auto-fill, minmax(250px, 1fr))\" gap={6}>\n          {Object.entries(whitelist).map(([name, address], index) => {\n            const imageSrc = images[name];\n            return (\n              <Box key={index} p={5} shadow=\"md\" borderWidth=\"1px\" rounded=\"lg\" _hover={{ shadow: \"xl\" }} cursor=\"pointer\" onClick={() => handleCollectionClick(address)}>\n                <Image src={imageSrc} alt={name} boxSize=\"150px\" objectFit=\"cover\" m=\"auto\" />\n                <Text mt={2} textAlign=\"center\" fontWeight=\"bold\">{name}</Text>\n              </Box>\n            );\n          })}\n        </Grid>\n        <Box textAlign=\"center\" mt={5}>\n          <Button colorScheme=\"teal\" onClick={() => navigate('/Explorer')}>View All Collections</Button>\n        </Box>\n\n        {/* Realtime Activity Section */}\n        <Box mt={10}>\n          <Heading as=\"h2\" size=\"lg\" textAlign=\"center\" mb={4}>Realtime Activity</Heading>\n          <Tabs isFitted variant=\"enclosed\">\n            <TabList mb=\"1em\">\n              <Tab>New Listings</Tab>\n              <Tab>Latest Sold</Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>\n                <Grid templateColumns=\"repeat(auto-fill, minmax(250px, 1fr))\" gap={6}>\n                  {recentListings.map((item, index) => (\n                    <Box key={index} p={5} shadow=\"md\" borderWidth=\"1px\" rounded=\"lg\" cursor=\"pointer\" onClick={() => navigateToNFTDetail(item.erc721Address, item.tokenId)}>\n                      <Image src={item.image} alt={item.name} boxSize=\"150px\" objectFit=\"cover\" m=\"auto\" />\n                      <Text mt={2} textAlign=\"center\" fontWeight=\"bold\">{item.name}</Text>\n                      <Text mt={2} textAlign=\"center\">{item.displayPrice} ETH</Text>\n                      <div onClick={(e) => e.stopPropagation()}>\n                        <BuyNow erc721Address={item.erc721Address} tokenId={item.tokenId} price={item.price} />\n                      </div>\n\n                    </Box>\n                  ))}\n                </Grid>\n              </TabPanel>\n              <TabPanel>\n                <Grid templateColumns=\"repeat(auto-fill, minmax(250px, 1fr))\" gap={6}>\n                  {recentSales.map((item, index) => (\n                    <Box key={index} p={5} shadow=\"md\" borderWidth=\"1px\" rounded=\"lg\" cursor=\"pointer\" onClick={() => navigateToNFTDetail(item.erc721Address, item.tokenId)}>\n                      <Image src={item.image} alt={item.name} boxSize=\"150px\" objectFit=\"cover\" m=\"auto\" />\n                      <Text mt={2} textAlign=\"center\" fontWeight=\"bold\">{item.name}</Text>\n                      <Text mt={2} textAlign=\"center\">{item.price} ETH</Text>\n                      <Button colorScheme=\"teal\" onClick={(e) => { e.stopPropagation(); navigateToNFTDetail(item.erc721Address, item.tokenId); }}>View Detail</Button>\n                    </Box>\n                  ))}\n                </Grid>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/nuggets.b9161f81.png\";","export default __webpack_public_path__ + \"static/media/blast_riders.1e79bd7e.png\";","export default __webpack_public_path__ + \"static/media/ape.204018ed.png\";","export default __webpack_public_path__ + \"static/media/zkokaydog.f839cd31.png\";","export default __webpack_public_path__ + \"static/media/blast_knives.10316af2.png\";","import React, { useState } from 'react';\r\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Button, FormControl, FormLabel, Input, Select } from '@chakra-ui/react';\r\nimport { ethers } from 'ethers';\r\nimport ERC721ABI from '../../abi/erc721.json';\r\nimport MarketABI from '../../abi/market.json';\r\nimport { useWallet } from '../../hooks/useWallet';\r\n\r\n\r\nconst ListNFTModal = ({ isOpen, onClose, contractAddress, tokenId }) => {\r\n    const [price, setPrice] = useState('');\r\n    const [duration, setDuration] = useState('24h');\r\n    const marketplaceAddress = process.env.REACT_APP_MARKETPLACE_ADDRESS;\r\n    const { account, library } = useWallet();\r\n\r\n    const listNFT = async () => {\r\n        console.log(\"Attempting to list NFT with:\", { contractAddress, tokenId, price });\r\n\r\n        if (!price || !duration) {\r\n            alert('Please fill in all fields and ensure you have a valid contract address and token ID.');\r\n            return;\r\n        }\r\n\r\n        const erc721Contract = new ethers.Contract(contractAddress, ERC721ABI, library.getSigner());\r\n        const marketContract = new ethers.Contract(marketplaceAddress, MarketABI, library.getSigner());\r\n\r\n        // Convert price to wei\r\n        const priceInWei = ethers.utils.parseEther(price);\r\n\r\n        // Calculate expiry timestamp based on duration\r\n        let expiryTimestamp = Date.now() / 1000; // current timestamp in seconds\r\n        switch (duration) {\r\n            case '24h':\r\n                expiryTimestamp += 24 * 60 * 60;\r\n                break;\r\n            case '7d':\r\n                expiryTimestamp += 7 * 24 * 60 * 60;\r\n                break;\r\n            case '1m':\r\n                expiryTimestamp += 30 * 24 * 60 * 60;\r\n                break;\r\n            case '3m':\r\n                expiryTimestamp += 3 * 30 * 24 * 60 * 60;\r\n                break;\r\n            case '6m':\r\n                expiryTimestamp += 6 * 30 * 24 * 60 * 60;\r\n                break;\r\n            default:\r\n                expiryTimestamp += 24 * 60 * 60; // default to 24 hours\r\n        }\r\n\r\n        try {\r\n            // Check if the marketplace is approved\r\n            const isApproved = await erc721Contract.isApprovedForAll(account, marketplaceAddress);\r\n            if (!isApproved) {\r\n                // Request approval\r\n                const txApprove = await erc721Contract.setApprovalForAll(marketplaceAddress, true);\r\n                await txApprove.wait();\r\n            }\r\n\r\n            // List the NFT\r\n            const txList = await marketContract.listToken(contractAddress, tokenId, priceInWei, Math.floor(expiryTimestamp));\r\n            await txList.wait();\r\n\r\n            alert('NFT listed successfully!');\r\n            onClose(); // Close the modal\r\n        } catch (error) {\r\n            console.error('Failed to list NFT:', error);\r\n            alert('Error listing NFT. See console for details.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>List NFT for Sale</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    <FormControl>\r\n                        <FormLabel>Price in ETH</FormLabel>\r\n                        <Input type=\"text\" value={price} onChange={(e) => setPrice(e.target.value)} placeholder=\"Enter price in ETH\" />\r\n                    </FormControl>\r\n                    <FormControl mt={4}>\r\n                        <FormLabel>Duration</FormLabel>\r\n                        <Select value={duration} onChange={(e) => setDuration(e.target.value)}>\r\n                            <option value=\"24h\">24 hours</option>\r\n                            <option value=\"7d\">7 days</option>\r\n                            <option value=\"1m\">1 month</option>\r\n                            <option value=\"3m\">3 months</option>\r\n                            <option value=\"6m\">6 months</option>\r\n                        </Select>\r\n                    </FormControl>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button colorScheme=\"blue\" mr={3} onClick={listNFT}>\r\n                        Complete Listing\r\n                    </Button>\r\n                    <Button variant=\"ghost\" onClick={onClose}>Cancel</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ListNFTModal;\r\n","import React from 'react';\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    Text,\r\n} from '@chakra-ui/react';\r\nimport { ethers } from 'ethers';\r\nimport MarketABI from '../../abi/market.json'; // Adjust the import path as needed\r\nimport { useWallet } from '../../hooks/useWallet';\r\n\r\nconst DeListNFTModal = ({ isOpen, onClose, contractAddress, tokenId }) => {\r\n    const marketplaceAddress = process.env.REACT_APP_MARKETPLACE_ADDRESS;\r\n    const { library } = useWallet();\r\n\r\n    const deListNFT = async () => {\r\n        if (!library || !contractAddress || !tokenId) {\r\n            alert('Please ensure you have selected a valid NFT to delist.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const marketContract = new ethers.Contract(marketplaceAddress, MarketABI, library.getSigner());\r\n            const tx = await marketContract.delistToken(contractAddress, tokenId);\r\n            await tx.wait();\r\n\r\n            alert('NFT delisted successfully!');\r\n            onClose(); // Close the modal after successful delisting\r\n        } catch (error) {\r\n            console.error('Failed to delist NFT:', error);\r\n            alert('Error delisting NFT. See console for details.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Delist NFT</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    <Text>Are you sure you want to delist this NFT?</Text>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button colorScheme=\"blue\" mr={3} onClick={deListNFT}>\r\n                        Confirm Delist\r\n                    </Button>\r\n                    <Button variant=\"ghost\" onClick={onClose}>Cancel</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeListNFTModal;\r\n","import React from 'react';\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    Text,\r\n} from '@chakra-ui/react';\r\nimport { ethers } from 'ethers';\r\nimport MarketABI from '../../abi/market.json'; // Adjust the import path as needed\r\nimport { useWallet } from '../../hooks/useWallet';\r\n\r\nconst CancelBidModal = ({ isOpen, onClose, contractAddress, tokenId }) => {\r\n    const marketplaceAddress = process.env.REACT_APP_MARKETPLACE_ADDRESS;\r\n    const { library } = useWallet();\r\n\r\n    const cancelBid = async () => {\r\n        if (!library || !contractAddress || !tokenId) {\r\n            alert('Please ensure you have selected a valid NFT to cancel the bid for.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const marketContract = new ethers.Contract(marketplaceAddress, MarketABI, library.getSigner());\r\n            const tx = await marketContract.withdrawBidForToken(contractAddress, tokenId);\r\n            await tx.wait();\r\n\r\n            alert('Bid cancelled successfully!');\r\n            onClose(); // Close the modal after successful bid cancellation\r\n        } catch (error) {\r\n            console.error('Failed to cancel bid:', error);\r\n            alert('Error cancelling bid. See console for details.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Cancel Bid</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    <Text>Are you sure you want to cancel your bid on this NFT?</Text>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button colorScheme=\"blue\" mr={3} onClick={cancelBid}>\r\n                        Confirm Cancel Bid\r\n                    </Button>\r\n                    <Button variant=\"ghost\" onClick={onClose}>Cancel</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CancelBidModal;\r\n","import { useNavigate } from 'react-router-dom'; // Step 1\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\n// import ERC721ABI from '../abi/erc721.json';\r\nimport { useWallet } from '../hooks/useWallet';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_LISTED_NFTS_FOR_ADDRESS, GET_BIDS_BY_ADDRESS, GET_ALL_NFTS_OWNED_BY_USER } from '../graphql/Queries';\r\n// import client from '../graphql/apollo-client';\r\nimport ListNFTModal from '../components/Market/ListNFTModal';\r\nimport DeListNFTModal from '../components/Market/DeListNFTModal';\r\nimport CancelBidModal from '../components/Market/CancelBidModel';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Text,\r\n  Image,\r\n} from '@chakra-ui/react';\r\nimport Nft from \"../util/Nft\";\r\n// import whitelist from \"../components/Whitelist\";\r\n\r\nconst Wallet = () => {\r\n  const [nfts, setNfts] = useState([]);\r\n  const { account, library } = useWallet();\r\n  const [bids, setBids] = useState([]);\r\n  const [listings, setListings] = useState([]);\r\n  //list,cancel list, cancel bid//\r\n  const [isListModalOpen, setIsListModalOpen] = useState(false);\r\n  const [selectedNFT, setSelectedNFT] = useState({});\r\n  const [isDeListModalOpen, setIsDeListModalOpen] = useState(false);\r\n  const [selectedNFTForDelist, setSelectedNFTForDelist] = useState(null);\r\n  const [isCancelBidModalOpen, setIsCancelBidModalOpen] = useState(false);\r\n  const [selectedNFTForBidCancel, setSelectedNFTForBidCancel] = useState(null);\r\n\r\n  // Fetching Listed NFTs for the connected wallet\r\n  const { data, loading, error } = useQuery(GET_LISTED_NFTS_FOR_ADDRESS, {\r\n    variables: { seller: account?.toLowerCase() },\r\n    skip: !account, // Skip this query if account is not available\r\n  });\r\n\r\n  // Fetching Active Bids for the connected wallet\r\n  const { data: bidsData } = useQuery(GET_BIDS_BY_ADDRESS, {\r\n    variables: { bidder: account?.toLowerCase() },\r\n    skip: !account, // Skip this query if account is not available\r\n  });\r\n\r\n  // Use the useQuery hook to fetch NFTs owned by the user with skip option\r\n  const { data: ownedNFTsData, loading: ownedNFTsLoading, error: ownedNFTsError } = useQuery(GET_ALL_NFTS_OWNED_BY_USER, {\r\n    variables: { owner: account?.toLowerCase() },\r\n    skip: !account, // Skip this query if account is not available\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"GraphQL Query Data:\", data);\r\n    console.log(\"GraphQL Query Loading:\", loading);\r\n    console.log(\"GraphQL Query Error:\", error);\r\n  }, [data, loading, error]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (data && data.listings) {\r\n      const fetchAllMetadata = async () => {\r\n        const listingsWithMetadata = await Promise.all(data.listings.map(async (listing) => {\r\n          const nft = new Nft(168587773, listing.erc721Address, listing.tokenId)\r\n          const metadata = await nft.metadata();\r\n          metadata.image = nft.image()\r\n          return {\r\n            ...listing,\r\n            metadata,\r\n            contractAddress: listing.erc721Address, // Ensure correct property names\r\n            tokenId: listing.tokenId.toString(),\r\n          };\r\n        }));\r\n\r\n        // Set your state with the adjusted listings\r\n        setListings(listingsWithMetadata);\r\n      };\r\n\r\n      fetchAllMetadata();\r\n    }\r\n  }, [data, library]);\r\n\r\n  //Display Each Bid in the Bids Tab Panel -subgraph\r\n  useEffect(() => {\r\n    if (bidsData && bidsData.bids) {\r\n      const fetchBidsMetadata = async () => {\r\n        const bidsWithMetadata = await Promise.all(bidsData.bids.map(async (bid) => {\r\n          const nft = new Nft(168587773, bid.erc721Address, bid.tokenId)\r\n          const metadata = await nft.metadata();\r\n          metadata.image = nft.image()\r\n          return {\r\n            ...bid,\r\n            metadata,\r\n            contractAddress: bid.erc721Address, // Ensure this is the correct property from your bids data\r\n            tokenId: bid.tokenId.toString(), // Convert tokenId to string if necessary\r\n          };\r\n        }));\r\n        setBids(bidsWithMetadata);\r\n      };\r\n\r\n      fetchBidsMetadata();\r\n    }\r\n  }, [bidsData, library]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (ownedNFTsData && !ownedNFTsLoading && !ownedNFTsError) {\r\n      const processOwnedNFTs = async () => {\r\n        try {\r\n          // Process the fetched NFTs\r\n          const ownedNfts = await Promise.all(ownedNFTsData.erc721S.map(async (nft) => {\r\n            const metadataNft = new Nft(168587773, nft.address, nft.tokenId);\r\n            const metadata = await metadataNft.metadata();\r\n            return {\r\n              metadata,\r\n              tokenId: nft.tokenId.toString(),\r\n              contractAddress: nft.address,\r\n            };\r\n          }));\r\n\r\n          // Update the state with the fetched NFTs\r\n          setNfts(ownedNfts.filter(nft =>\r\n            // Optionally filter out NFTs based on certain criteria, such as being listed\r\n            !listings.some(listing =>\r\n              listing.tokenId === nft.tokenId && listing.erc721Address.toLowerCase() === nft.contractAddress.toLowerCase()\r\n            )\r\n          ));\r\n        } catch (error) {\r\n          console.error(\"Error processing owned NFTs:\", error);\r\n        }\r\n      };\r\n\r\n      processOwnedNFTs();\r\n    }\r\n  }, [ownedNFTsData, ownedNFTsLoading, ownedNFTsError, listings]);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  // Handler for opening the listing modal with selected NFT details\r\n  const openListModal = (nft) => {\r\n    console.log(\"Opening modal for NFT with:\", nft);\r\n    setSelectedNFT(nft); // nft includes metadata, tokenId, and contractAddress\r\n    setIsListModalOpen(true);\r\n  };\r\n\r\n  // Handler for opening the DeListNFTModal with the selected NFT\r\n  const openDeListModal = (nft) => {\r\n    setSelectedNFTForDelist(nft);\r\n    setIsDeListModalOpen(true);\r\n  };\r\n\r\n  // Handler for opening the DeListNFTModal with the selected NFT\r\n  const openCancelBidModal = (nft) => {\r\n    setSelectedNFTForBidCancel(nft);\r\n    setIsCancelBidModalOpen(true);\r\n  };\r\n\r\n\r\n  const NFTCard = ({ nft, price, isListing, isBid }) => {\r\n    const navigate = useNavigate(); // Step 2\r\n\r\n    const navigateToNFTDetail = () => {\r\n      navigate(`/collection/${nft.contractAddress}/${nft.tokenId}`);\r\n    };\r\n\r\n    return (\r\n      <Box\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        overflow=\"hidden\"\r\n        position=\"relative\"\r\n        cursor=\"pointer\"\r\n        onClick={navigateToNFTDetail} // Step 3\r\n      >\r\n        <Image src={nft.metadata?.image || nft?.image} alt={nft.metadata?.name || nft?.name} />\r\n        <Box p=\"6\">\r\n          <Text fontWeight=\"semibold\" as=\"h4\" lineHeight=\"tight\" isTruncated>\r\n            {nft.metadata?.name || nft?.name}\r\n          </Text>\r\n          {price && <Text>Price: {ethers.utils.formatEther(price)} ETH</Text>}\r\n          {isListing && (\r\n            <Button\r\n              size=\"sm\"\r\n              colorScheme=\"red\"\r\n              mt=\"2\"\r\n              onClick={(e) => {\r\n                e.stopPropagation(); // Prevent navigation when clicking on the button\r\n                openDeListModal(nft); // Open the DeListNFTModal for the selected NFT\r\n              }}\r\n            >\r\n              Cancel Listing\r\n            </Button>\r\n          )}\r\n          {isBid && (\r\n            <Button\r\n              size=\"sm\"\r\n              colorScheme=\"orange\"\r\n              mt=\"2\"\r\n              onClick={(e) => {\r\n                e.stopPropagation(); // Prevent navigation when clicking on the button\r\n                openCancelBidModal(nft);\r\n              }}\r\n            >\r\n              Cancel Bid\r\n            </Button>\r\n          )}\r\n          {!isListing && !isBid && (\r\n            <Button\r\n              size=\"sm\"\r\n              colorScheme=\"teal\"\r\n              mt=\"2\"\r\n              onClick={(e) => {\r\n                e.stopPropagation(); // Prevent navigation when clicking on the button\r\n                openListModal(nft);\r\n              }}\r\n            >\r\n              List for Sale\r\n            </Button>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    <Box p={5}>\r\n      <Tabs isFitted variant=\"enclosed\">\r\n        <TabList mb=\"1em\">\r\n          <Tab>Assets</Tab>\r\n          <Tab>Listings</Tab>\r\n          <Tab>Bids</Tab>\r\n        </TabList>\r\n        <TabPanels>\r\n          <TabPanel>\r\n            <Box display=\"grid\" gridTemplateColumns=\"repeat(auto-fill, minmax(250px, 1fr))\" gap={6}>\r\n              {nfts.map((nft, index) => (\r\n                <NFTCard key={index} nft={nft} />\r\n              ))}\r\n            </Box>\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <Box display=\"grid\" gridTemplateColumns=\"repeat(auto-fill, minmax(250px, 1fr))\" gap={6}>\r\n              {listings.map((listing, index) => {\r\n                // Ensure each listing has contractAddress and tokenId\r\n                if (!listing.contractAddress || !listing.tokenId) {\r\n                  console.error(\"Listing missing critical navigation data:\", listing);\r\n                  return null; // Skip rendering this NFTCard for problematic listing\r\n                }\r\n                return (\r\n                  <NFTCard\r\n                    key={index}\r\n                    nft={listing}\r\n                    price={listing.price}\r\n                    isListing={true}\r\n                    isBid={false}\r\n                  />\r\n                );\r\n              })}\r\n              <ListNFTModal isOpen={isListModalOpen} onClose={() => setIsListModalOpen(false)} contractAddress={selectedNFT.contractAddress} tokenId={selectedNFT.tokenId} />\r\n            </Box>\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <Box display=\"grid\" gridTemplateColumns=\"repeat(auto-fill, minmax(250px, 1fr))\" gap={6}>\r\n              {bids.map((bid, index) => {\r\n                // Ensure each bid has contractAddress and tokenId\r\n                if (!bid.contractAddress || !bid.tokenId) {\r\n                  console.error(\"Bid missing critical navigation data:\", bid);\r\n                  return null; // Skip rendering this NFTCard for problematic bid\r\n                }\r\n                return (\r\n                  <NFTCard\r\n                    key={index}\r\n                    nft={bid}\r\n                    price={bid.value}\r\n                    isListing={false}\r\n                    isBid={true}\r\n                  />\r\n                );\r\n              })}\r\n            </Box>\r\n            <CancelBidModal\r\n              isOpen={isCancelBidModalOpen}\r\n              onClose={() => setIsCancelBidModalOpen(false)}\r\n              contractAddress={selectedNFTForBidCancel?.contractAddress}\r\n              tokenId={selectedNFTForBidCancel?.tokenId}\r\n            />\r\n          </TabPanel>\r\n\r\n        </TabPanels>\r\n\r\n      </Tabs>\r\n      {/* Am placing the DeListNFTModal , outside the Tabs component but inside the Box component */}\r\n      <DeListNFTModal\r\n        isOpen={isDeListModalOpen}\r\n        onClose={() => setIsDeListModalOpen(false)}\r\n        contractAddress={selectedNFTForDelist?.contractAddress}\r\n        tokenId={selectedNFTForDelist?.tokenId}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Wallet;","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.034ef726.svg\";","import React from 'react';\nimport { Image } from '@chakra-ui/react';\nimport logo from '../assets/logo.svg';\n\nexport const Logo = props => {\n  return <Image src={logo} {...props} />;\n};\n","import { useNavigate } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Flex,\n  Button,\n  Input,\n  Stack,\n  Link,\n  Text,\n  InputGroup,\n  InputLeftElement,\n  IconButton,\n  Collapse,\n  useDisclosure,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Logo } from './Logo';\nimport { HamburgerIcon, CloseIcon, SearchIcon } from '@chakra-ui/icons';\nimport { useWallet } from '../hooks/useWallet'; // Adjust the import path as needed\n\n\nconst NAV_ITEMS = [\n  {\n    label: 'Explorer',\n    href: '#',\n  },\n  {\n    label: 'Wallet',\n    href: '/wallet',\n  },\n];\n\nfunction DesktopNavLink({ navItem }) {\n  return (\n    <Link\n      href={navItem.href}\n      fontSize={'sm'}\n      fontWeight={700}\n      color={useColorModeValue('gray.600', 'gray.200')}\n      _hover={{\n        textDecoration: 'none',\n        color: useColorModeValue('gray.800', 'white'),\n      }}\n    >\n      {navItem.label}\n    </Link>\n  );\n}\n\nfunction MobileNavLink({ navItem }) {\n  return (\n    <Flex\n      px={4}\n      py={4}\n      as={Link}\n      href={navItem.href}\n      justify={'space-between'}\n      borderStyle={'solid'}\n      borderTop=\"1px\"\n      borderColor={useColorModeValue('gray.200', 'gray.900')}\n      align={'center'}\n      _hover={{\n        textDecoration: 'none',\n      }}\n    >\n      <Text fontWeight={700} color={useColorModeValue('gray.600', 'gray.200')}>\n        {navItem.label}\n      </Text>\n    </Flex>\n  );\n}\n\n// Function to format the wallet address\nconst formatAddress = (address) => {\n  return `${address.substring(0, 5)}...${address.substring(address.length - 3)}`;\n};\n\nfunction Header() {\n  const { isOpen, onToggle } = useDisclosure();\n  const [searchValue, setSearchValue] = useState('');\n  const { connect, active, account, chainId } = useWallet();\n  const navigate = useNavigate(); // Instantiate the useNavigate hook\n\n  const handleSearchChange = (event) => {\n    setSearchValue(event.target.value);\n  };\n\n  const handleSearchSubmit = () => {\n    // Use the navigate function to redirect the user to the search result\n    // Ensure the address is normalized to lowercase for consistency\n    navigate(`/collection/${searchValue.toLowerCase()}`);\n  };\n\n  // Detect the \"Enter\" key press in the search input to trigger the search\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSearchSubmit();\n    }\n  };\n\n  return (\n    <Box>\n      <Flex\n        h=\"78px\"\n        px={{ base: 4 }}\n        color={useColorModeValue('gray.600', 'white')}\n        bg={useColorModeValue('white', 'gray.800')}\n        borderStyle={'solid'}\n        borderBottom=\"1px\"\n        borderColor={useColorModeValue('gray.200', 'gray.900')}\n        align={'center'}\n      >\n        <Box>\n          <Logo w=\"40px\" pointerEvents=\"none\" />\n        </Box>\n        <Box pl=\"5\" flex=\"1\">\n          <InputGroup display={{ base: 'none', md: 'flex' }}>\n            <InputLeftElement children={<SearchIcon color=\"gray.300\" />} />\n            <Input\n              borderRadius=\"3xl\"\n              placeholder=\"Search by collection address\"\n              size=\"md\"\n              value={searchValue}\n              onChange={handleSearchChange}\n              onKeyPress={handleKeyPress} // Add the key press event handler\n            />\n            <Button onClick={handleSearchSubmit} ml={2}>Search</Button> {/* Search button */}\n          </InputGroup>\n        </Box>\n        <Box pl=\"5\" display={{ base: 'none', md: 'flex' }}>\n          <Stack pl=\"5\" direction=\"row\" align=\"center\" spacing={6}>\n            {NAV_ITEMS.map((navItem, index) => (\n              <DesktopNavLink key={index} navItem={navItem} />\n            ))}\n          </Stack>\n          <Stack pl=\"7\" direction=\"row\" align=\"center\" spacing={3}>\n            <Button\n              variant={'outline'}\n              colorScheme={'teal'}\n              size=\"md\"\n              onClick={!active ? connect : undefined} // Connect wallet when not active\n            >\n              {!active ? (chainId ? 'Chain not supported' : 'Connect Wallet') : `Wallet: ${formatAddress(account)}`}\n            </Button>\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n          </Stack>\n        </Box>\n        <Stack direction=\"row\" display={{ base: 'flex', md: 'none' }}>\n          <IconButton\n            icon={<SearchIcon />}\n            variant=\"outline\"\n            aria-label={'Toggle Navigation'}\n          />\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant=\"outline\"\n            aria-label={'Toggle Navigation'}\n          />\n        </Stack>\n      </Flex>\n      <Collapse in={isOpen} animateOpacity>\n        <Stack px={4} py={4} direction=\"row\" align=\"center\" spacing={3}>\n          <Button\n            flex={1}\n            variant={'outline'}\n            colorScheme={'teal'}\n            size=\"md\"\n            onClick={!active ? connect : undefined} // Repeated for mobile view\n          >\n            {!active ? (chainId ? 'Chain not supported' : 'Connect Wallet') : `Wallet: ${account}`}\n          </Button>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n        </Stack>\n        <Box\n          borderStyle={'solid'}\n          borderBottom=\"1px\"\n          borderColor={useColorModeValue('gray.200', 'gray.900')}\n        >\n          {NAV_ITEMS.map((navItem, index) => (\n            <MobileNavLink navItem={navItem} key={index} />\n          ))}\n        </Box>\n      </Collapse>\n    </Box>\n  );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalCloseButton,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Button,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    Select,\r\n    useToast\r\n} from '@chakra-ui/react';\r\nimport MarketABI from '../../abi/market.json';\r\nimport WETHABI from '../../abi/erc20.json';\r\nimport { useWallet } from '../../hooks/useWallet';\r\n\r\nconst MakeOffer = ({ isOpen, onClose, erc721Address, tokenId }) => {\r\n    const { account, library } = useWallet();\r\n    const marketplaceAddress = process.env.REACT_APP_MARKETPLACE_ADDRESS;\r\n    const WETHAddress = process.env.REACT_APP_WETH_ADDRESS;\r\n    const [value, setValue] = useState('');\r\n    const [duration, setDuration] = useState('24h');\r\n    const [isApproved, setIsApproved] = useState(false);\r\n    const toast = useToast();\r\n\r\n    useEffect(() => {\r\n        const checkAllowance = async () => {\r\n            if (!account || !library) return;\r\n            const signer = library.getSigner(account);\r\n            const WETHContract = new ethers.Contract(WETHAddress, WETHABI, signer);\r\n            const allowance = await WETHContract.allowance(account, marketplaceAddress);\r\n            setIsApproved(allowance.gt(ethers.utils.parseEther(value || '0')));\r\n        };\r\n        checkAllowance();\r\n    }, [account, library, value, WETHAddress, marketplaceAddress]);\r\n\r\n    const calculateExpiryTimestamp = () => {\r\n        let secondsToAdd;\r\n        switch (duration) {\r\n            case '24h':\r\n                secondsToAdd = 24 * 60 * 60;\r\n                break;\r\n            case '7d':\r\n                secondsToAdd = 7 * 24 * 60 * 60;\r\n                break;\r\n            case '1m':\r\n                secondsToAdd = 30 * 24 * 60 * 60;\r\n                break;\r\n            case '3m':\r\n                secondsToAdd = 3 * 30 * 24 * 60 * 60;\r\n                break;\r\n            case '6m':\r\n                secondsToAdd = 6 * 30 * 24 * 60 * 60;\r\n                break;\r\n            default:\r\n                secondsToAdd = 24 * 60 * 60; // Default to 24 hours\r\n        }\r\n        return Math.floor(Date.now() / 1000) + secondsToAdd;\r\n    };\r\n\r\n    const handleApprove = async () => {\r\n        try {\r\n            const signer = library.getSigner(account);\r\n            const WETHContract = new ethers.Contract(WETHAddress, WETHABI, signer);\r\n            const tx = await WETHContract.approve(marketplaceAddress, ethers.utils.parseEther(value));\r\n            await tx.wait();\r\n            setIsApproved(true);\r\n            toast({\r\n                title: \"Approval successful\",\r\n                description: \"You can now make an offer.\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n        } catch (error) {\r\n            console.error('Approval failed:', error);\r\n            toast({\r\n                title: \"Approval failed\",\r\n                description: \"See console for more details.\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleSubmitOffer = async () => {\r\n        if (!isApproved) {\r\n            toast({\r\n                title: \"Not approved\",\r\n                description: \"Please approve before making an offer.\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const signer = library.getSigner(account);\r\n            const marketContract = new ethers.Contract(marketplaceAddress, MarketABI, signer);\r\n            const expireTimestamp = calculateExpiryTimestamp();\r\n            const tx = await marketContract.enterBidForToken(\r\n                erc721Address,\r\n                tokenId,\r\n                ethers.utils.parseEther(value),\r\n                expireTimestamp\r\n            );\r\n            await tx.wait();\r\n            onClose(); // Close the modal\r\n            toast({\r\n                title: \"Offer submitted successfully\",\r\n                description: \"Your offer has been placed.\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n        } catch (error) {\r\n            console.error('Offer submission failed:', error);\r\n            toast({\r\n                title: \"Offer failed\",\r\n                description: \"See console for more details.\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Make an Offer</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    <FormControl>\r\n                        <FormLabel>Amount in WETH</FormLabel>\r\n                        <Input value={value} onChange={(e) => setValue(e.target.value)} placeholder=\"Enter amount in WETH\" />\r\n                    </FormControl>\r\n                    <FormControl mt={4}>\r\n                        <FormLabel>Duration</FormLabel>\r\n                        <Select value={duration} onChange={(e) => setDuration(e.target.value)}>\r\n                            <option value=\"24h\">24 hours</option>\r\n                            <option value=\"7d\">7 days</option>\r\n                            <option value=\"1m\">1 month</option>\r\n                            <option value=\"3m\">3 months</option>\r\n                            <option value=\"6m\">6 months</option>\r\n                        </Select>\r\n                    </FormControl>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    {!isApproved && <Button colorScheme=\"blue\" mr={3} onClick={handleApprove}>Approve</Button>}\r\n                    <Button colorScheme=\"green\" onClick={handleSubmitOffer}>Confirm Offer</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default MakeOffer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalCloseButton,\r\n    ModalBody,\r\n    ModalFooter,\r\n    useToast\r\n} from '@chakra-ui/react';\r\nimport MarketABI from '../../abi/market.json'; // Adjust path as necessary\r\nimport ERC721ABI from '../../abi/erc721.json'; // Adjust path as necessary\r\nimport { useWallet } from '../../hooks/useWallet';\r\n\r\nconst AcceptOffer = ({ isOpen, onClose, erc721Address, tokenId, bidder, value }) => {\r\n    const { account, library } = useWallet();\r\n    const toast = useToast();\r\n    const [isApproved, setIsApproved] = useState(false);\r\n    const marketplaceAddress = process.env.REACT_APP_MARKETPLACE_ADDRESS;\r\n\r\n    // Fetch and log the owner of the NFT to see why the transaction revert and cross check if the owner is the same\r\n    useEffect(() => {\r\n        const fetchOwner = async () => {\r\n            if (!library || !erc721Address || !tokenId) return;\r\n            try {\r\n                const contract = new ethers.Contract(erc721Address, ERC721ABI, library);\r\n                const owner = await contract.ownerOf(tokenId);\r\n                console.log(`Owner of NFT (Token ID: ${tokenId}):`, owner);\r\n            } catch (error) {\r\n                console.error(\"Error fetching NFT owner:\", error);\r\n            }\r\n        };\r\n        fetchOwner();\r\n    }, [library, erc721Address, tokenId]);\r\n\r\n    // Check if the contract is approved to transfer the NFT on behalf of the owner\r\n    useEffect(() => {\r\n        const checkApproval = async () => {\r\n            if (!account || !library || !erc721Address) return;\r\n            const contract = new ethers.Contract(erc721Address, ERC721ABI, library.getSigner());\r\n            const isApproved = await contract.isApprovedForAll(account, marketplaceAddress);\r\n            setIsApproved(isApproved);\r\n        };\r\n        checkApproval();\r\n    }, [account, library, erc721Address, marketplaceAddress]);\r\n\r\n    const handleApprove = async () => {\r\n        const contract = new ethers.Contract(erc721Address, ERC721ABI, library.getSigner());\r\n        try {\r\n            const tx = await contract.setApprovalForAll(marketplaceAddress, true);\r\n            await tx.wait();\r\n            setIsApproved(true);\r\n            toast({\r\n                title: 'Approval successful',\r\n                description: 'The contract is now approved to transfer your NFT.',\r\n                status: 'success',\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n        } catch (error) {\r\n            toast({\r\n                title: 'Approval failed',\r\n                description: `Error: ${error.message}`,\r\n                status: 'error',\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAcceptOffer = async () => {\r\n        if (!isApproved) {\r\n            toast({\r\n                title: 'Not approved',\r\n                description: 'Please approve the contract to transfer your NFT.',\r\n                status: 'warning',\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n            return;\r\n        }\r\n        const marketContract = new ethers.Contract(marketplaceAddress, MarketABI, library.getSigner());\r\n        try {\r\n            console.log(\"Accepting offer with parameters:\", {\r\n                erc721Address,\r\n                tokenId,\r\n                bidder,\r\n                value: ethers.utils.formatUnits(value, 'wei') // Ensure value is in wei\r\n            });\r\n            // const tx = await marketContract.acceptBidForToken(erc721Address, tokenId, bidder, value);\r\n            const tx = await marketContract.acceptBidForToken(\r\n                erc721Address,\r\n                tokenId,\r\n                bidder,\r\n                ethers.utils.parseUnits(value.toString(), 'wei') // Ensure value is correctly formatted in wei\r\n            );\r\n            await tx.wait();\r\n            onClose(); // Close the modal\r\n            toast({\r\n                title: 'Offer accepted successfully',\r\n                description: 'The NFT has been successfully transferred to the bidder.',\r\n                status: 'success',\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n        } catch (error) {\r\n            toast({\r\n                title: 'Accept offer failed',\r\n                description: `Error: ${error.message}`,\r\n                status: 'error',\r\n                duration: 5000,\r\n                isClosable: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Accept Offer</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    Are you sure you want to accept this offer?\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    {!isApproved && (\r\n                        <Button colorScheme=\"blue\" mr={3} onClick={handleApprove}>\r\n                            Approve Contract\r\n                        </Button>\r\n                    )}\r\n                    <Button colorScheme=\"green\" onClick={handleAcceptOffer} isDisabled={!isApproved}>\r\n                        Accept Offer\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AcceptOffer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n    Box,\r\n    Text,\r\n    Image,\r\n    VStack,\r\n    Grid,\r\n    Button,\r\n    useDisclosure,\r\n    Collapse,\r\n    Link as ChakraLink,\r\n    GridItem\r\n} from '@chakra-ui/react';\r\nimport { ethers } from 'ethers';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useWallet } from '../hooks/useWallet';\r\nimport { GET_ACTIVE_LISTING_BY_NFT, GET_ACTIVE_BIDS_FOR_NFT, GET_ALL_SOLD_FOR_NFT } from '../graphql/Queries';\r\nimport BuyNow from '../components/Market/BuyNow';\r\nimport MakeOffer from '../components/Market/MakeOffer';\r\nimport AcceptOffer from '../components/Market/AcceptOffer';\r\nimport Nft from \"../util/Nft\";\r\n\r\n\r\nconst NFTDetail = () => {\r\n    let { contractAddress, tokenId } = useParams();\r\n    contractAddress = contractAddress.toLowerCase();\r\n    const { active, account } = useWallet();\r\n    const [nftDetails, setNftDetails] = useState({});\r\n    const [isListed, setIsListed] = useState(false);\r\n    const [isSeller, setIsSeller] = useState(false);\r\n    const [isOwner, setIsOwner] = useState(false);\r\n    const { isOpen: isOfferOpen, onOpen: onOfferOpen, onClose: onOfferClose } = useDisclosure();\r\n    const { isOpen: isBidsOpen, onToggle: onBidsToggle } = useDisclosure();\r\n    const [selectedBid, setSelectedBid] = useState(null);\r\n    const { isOpen: isAcceptOfferOpen, onOpen: onAcceptOfferOpen, onClose: onAcceptOfferClose } = useDisclosure();\r\n    const { isOpen: isSalesOpen, onToggle: onSalesToggle } = useDisclosure();\r\n\r\n    const { data } = useQuery(GET_ACTIVE_LISTING_BY_NFT, {\r\n        variables: { erc721Address: contractAddress, tokenId },\r\n    });\r\n\r\n    const { data: bidsData } = useQuery(GET_ACTIVE_BIDS_FOR_NFT, {\r\n        variables: { erc721Address: contractAddress, tokenId },\r\n    });\r\n\r\n    // Use the GET_ALL_SOLD_FOR_NFT query\r\n    const { data: salesData } = useQuery(GET_ALL_SOLD_FOR_NFT, {\r\n        variables: { erc721Address: contractAddress, tokenId },\r\n    });\r\n\r\n    // Utility function to format the timestamp\r\n    const formatDate = (timestamp) => {\r\n        const date = new Date(timestamp * 1000);\r\n        return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\r\n    };\r\n\r\n    const handleSelectBid = (bid) => {\r\n        setSelectedBid(bid);\r\n        onAcceptOfferOpen();\r\n    };\r\n\r\n    // Utility function to format addresses\r\n    const formatAddress = (address) => `${address.slice(0, 5)}...${address.slice(-3)}`;\r\n\r\n    // Utility function to format expiration timestamp\r\n    const formatExpiration = (expireTimestamp) => {\r\n        const expiryDate = new Date(expireTimestamp * 1000);\r\n        const now = new Date();\r\n        const diff = expiryDate - now;\r\n        const days = Math.floor(diff / (1000 * 60 * 60 * 24));\r\n        const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);\r\n        const minutes = Math.floor((diff / 1000 / 60) % 60);\r\n\r\n        if (days > 0) return `${days} days`;\r\n        if (hours > 0) return `${hours} hours`;\r\n        if (minutes > 0) return `${minutes} minutes`;\r\n        return \"Expired\";\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data && data.listings && data.listings.length > 0) {\r\n            setIsListed(true);\r\n            setIsSeller(account && data.listings[0].seller.toLowerCase() === account.toLowerCase());\r\n        } else {\r\n            setIsListed(false);\r\n            setIsSeller(false); // Ensure isSeller is reset if there's no listing\r\n        }\r\n    }, [data, account]);\r\n\r\n    useEffect(() => {\r\n        const fetchNFTDetails = async () => {\r\n            if (!contractAddress || !tokenId) return;\r\n\r\n            try {\r\n                const nft = new Nft(168587773, contractAddress, tokenId);\r\n                const metadata = await nft.metadata();\r\n\r\n                const price = isListed && data.listings[0] ? ethers.utils.formatUnits(data.listings[0].price, 'ether') : null;\r\n\r\n                let owner = null;\r\n                if (active) { // Only attempt to fetch owner if wallet is connected\r\n                    owner = await nft.owner();\r\n                    setIsOwner(account && owner.toLowerCase() === account.toLowerCase());\r\n                }\r\n\r\n                setNftDetails({\r\n                    ...metadata,\r\n                    owner,\r\n                    image: nft.image(),\r\n                    price,\r\n                });\r\n                console.log(nft.image())\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch NFT details\", error);\r\n            }\r\n        };\r\n\r\n        fetchNFTDetails();\r\n    }, [contractAddress, tokenId, data, isListed, active, account]);\r\n\r\n\r\n    return (\r\n        <VStack spacing={4} p={10} align=\"stretch\">\r\n            <Box>\r\n                <Grid spacing={8} templateAreas={`\"nft traits\"`} gridTemplateColumns={'400px 1fr'}>\r\n                    <GridItem p={4}>\r\n                        <Image src={nftDetails.image} alt={nftDetails.name} borderRadius='5px' objectFit=\"cover\" />\r\n                        <Text fontSize=\"2xl\" fontWeight=\"bold\">{nftDetails.name}</Text>\r\n                        {nftDetails && nftDetails.owner != null ? <Text fontSize=\"sm\">\r\n                            Owned by: {nftDetails.owner.substring(0, 6)}...{nftDetails.owner.substring(38)}\r\n                        </Text> : ''}\r\n                        <Text fontSize=\"lg\">{nftDetails.description}</Text>\r\n\r\n                        {/* Show Buy Now button only if NFT is listed and user is not the seller */}\r\n                        {active && nftDetails.price && isListed && !isSeller && (\r\n                            <BuyNow erc721Address={contractAddress} tokenId={tokenId} price={ethers.utils.parseUnits(nftDetails.price, 'ether')} />\r\n                        )}\r\n                        {/* Show Make Offer button if NFT is not listed or user is not the seller */}\r\n                        {(active && !isOwner && (!isListed || !isSeller)) && (\r\n                            <Button colorScheme=\"blue\" mt=\"4\" onClick={onOfferOpen}>\r\n                                Make Offer\r\n                            </Button>\r\n                        )}\r\n\r\n                        <MakeOffer isOpen={isOfferOpen} onClose={onOfferClose} erc721Address={contractAddress} tokenId={tokenId} />\r\n                    </GridItem>\r\n                    <GridItem p={4}>\r\n                        <Grid templateColumns=\"repeat(3, 1fr)\" gap={4}>\r\n                            {nftDetails.attributes?.map((attr, index) => (\r\n                                <Box key={index} p=\"5\" shadow=\"md\" borderWidth=\"1px\">\r\n                                    <Text fontWeight=\"bold\">{attr.trait_type}</Text>\r\n                                    <Text>{attr.value}</Text>\r\n                                </Box>\r\n                            ))}\r\n                        </Grid>\r\n                    </GridItem>\r\n                </Grid>\r\n            </Box>\r\n\r\n            {/* Existing elements */}\r\n            <VStack align={'stretch'}>\r\n                <Button onClick={onBidsToggle}>{isBidsOpen ? 'Hide Offers/Bids' : 'Show Offers/Bids'} ({bidsData ? bidsData?.bids.length : ''})</Button>\r\n                <Collapse in={isBidsOpen} animateOpacity>\r\n                    <VStack spacing={4}>\r\n                        {bidsData?.bids.map((bid, index) => (\r\n                            <Box key={index} p={4} shadow=\"md\" borderWidth=\"1px\">\r\n                                <Text>Price: {ethers.utils.formatEther(bid.value)} ETH</Text>\r\n                                <Text>Expires: {formatExpiration(bid.expireTimestamp)}</Text>\r\n                                <Text>Bidder: {formatAddress(bid.bidder)}</Text>\r\n                                {isOwner && (\r\n                                    <Button size=\"sm\" colorScheme=\"blue\" onClick={() => handleSelectBid(bid)}>\r\n                                        Accept Offer\r\n                                    </Button>\r\n                                )}\r\n                            </Box>\r\n                        ))}\r\n                    </VStack>\r\n                </Collapse>\r\n                {selectedBid && isOwner && (\r\n                    <AcceptOffer\r\n                        isOpen={isAcceptOfferOpen}\r\n                        onClose={onAcceptOfferClose}\r\n                        erc721Address={selectedBid.erc721Address}\r\n                        tokenId={tokenId}\r\n                        bidder={selectedBid.bidder}\r\n                        value={selectedBid.value}\r\n                    />\r\n                )}\r\n\r\n                {/* Sales History Section */}\r\n                <Button onClick={onSalesToggle}>{isSalesOpen ? 'Hide History/Sales' : 'Show History/Sales '} ({salesData ? salesData.sales.length : ''})</Button>\r\n                <Collapse in={isSalesOpen} animateOpacity>\r\n                    {salesData && salesData.sales.length > 0 ? (\r\n                        <VStack spacing={4} align={'stretch'}>\r\n                            {salesData.sales.map((sale, index) => (\r\n                                <Box key={index} p={4} shadow=\"md\" borderWidth=\"1px\">\r\n                                    <Text fontWeight={'bold'}>Price: {ethers.utils.formatEther(sale.price)} ETH</Text>\r\n                                    <Text>Seller: {formatAddress(sale.seller)}</Text>\r\n                                    <Text>Buyer: {formatAddress(sale.buyer)}</Text>\r\n                                    <Text>Sold on: {formatDate(sale.timestamp)}</Text>\r\n                                    <ChakraLink href={`https://testnet.blastscan.io/tx/${sale.id.split('-')[0]}`} isExternal>\r\n                                        View Transaction\r\n                                    </ChakraLink>\r\n                                </Box>\r\n                            ))}\r\n                        </VStack>\r\n                    ) : (\r\n                        <Text>No sales</Text>\r\n                    )}\r\n                </Collapse>\r\n            </VStack>\r\n        </VStack>\r\n\r\n    );\r\n};\r\n\r\nexport default NFTDetail;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { Box, Text, Tabs, TabList, TabPanels, Tab, TabPanel, VStack, Flex, Image, Grid } from '@chakra-ui/react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { ethers } from 'ethers';\r\nimport { GET_COLLECTION_STATS, GET_LISTINGS_FOR_NFT_ADDRESS, GET_COLLECTION_NAME } from '../graphql/Queries';\r\n// import ERC721Abi from '../abi/erc721.json';\r\n// import { useWallet } from '../hooks/useWallet';\r\nimport BuyNow from '../components/Market/BuyNow';\r\nimport Nft from \"../util/Nft\";\r\n\r\nconst Collection = () => {\r\n    let { contractAddress } = useParams();\r\n    // Converting contractAddress to lowercase to ensure consistency with the subgraph\r\n    contractAddress = contractAddress.toLowerCase();\r\n    // const { library } = useWallet();\r\n    const [collectionName, setCollectionName] = useState('');\r\n    const [listings, setListings] = useState([]);\r\n    const navigate = useNavigate();\r\n\r\n\r\n    // Fetch collection stats\r\n    const { data: collectionStatsData } = useQuery(GET_COLLECTION_STATS, {\r\n        variables: { id: contractAddress },\r\n    });\r\n\r\n    console.log(\"Collection Stats Data:\", collectionStatsData);\r\n\r\n    // Fetch listings for the NFT contract address\r\n    const { data: listingsData } = useQuery(GET_LISTINGS_FOR_NFT_ADDRESS, {\r\n        variables: { erc721Address: contractAddress },\r\n    });\r\n    console.log(\"Listings Data:\", listingsData);\r\n\r\n    // Fetch collection name from the GraphQL endpoint\r\n    const { data: collectionNameData } = useQuery(GET_COLLECTION_NAME, {\r\n        variables: { id: contractAddress },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (collectionNameData && collectionNameData.collection) {\r\n            const name = collectionNameData.collection.name;\r\n            if (name) {\r\n                console.log(\"Collection Name:\", name);\r\n                setCollectionName(name);\r\n            }\r\n            console.log(\"Collection Data:\", collectionNameData);\r\n        }\r\n    }, [collectionNameData]);\r\n\r\n    useEffect(() => {\r\n        const currentTimestamp = Math.floor(Date.now() / 1000);\r\n        if (listingsData && listingsData.listings) {\r\n            console.log(\"Processing listings data...\");\r\n            const fetchListingsMetadata = async () => {\r\n                const updatedListings = await Promise.all(\r\n                    listingsData.listings\r\n                        .filter(listing => parseInt(listing.expireTimestamp) > currentTimestamp) // Filter out expired listings\r\n                        .map(async (listing) => {\r\n                            try {\r\n                                const nft = new Nft(168587773, contractAddress, listing.tokenId)\r\n                                const metadata = await nft.metadata();\r\n                                return {\r\n                                    ...listing,\r\n                                    image: nft.image(),\r\n                                    name: metadata.name,\r\n                                };\r\n                            } catch (error) {\r\n                                console.error(\"Error fetching token URI for listing:\", listing, error);\r\n                                return null; // Return null for listings with failed metadata fetch\r\n                            }\r\n                        })\r\n                );\r\n                console.log(\"Updated Listings with Metadata:\", updatedListings);\r\n                setListings(updatedListings.filter(listing => listing !== null)); // Filter out null values from failed metadata fetches\r\n            };\r\n\r\n            fetchListingsMetadata();\r\n        }\r\n    }, [listingsData, contractAddress]);\r\n\r\n    //Handle NFT Clicks\r\n    const handleNFTClick = (tokenId) => {\r\n        navigate(`/collection/${contractAddress}/${tokenId}`);\r\n    };\r\n\r\n    return (\r\n        <Box p={5}>\r\n            <VStack spacing={8} align=\"stretch\">\r\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Text fontSize=\"2xl\" fontWeight=\"bold\">{collectionName}</Text>\r\n                    <Box textAlign=\"right\">\r\n                        <Text fontSize=\"2xl\" fontWeight=\"bold\">{ethers.utils.formatEther(collectionStatsData?.collectionStats[0]?.totalVolumeTraded || \"0\")} ETH</Text>\r\n                        <Text fontSize=\"lg\" color=\"gray.600\">Total Volume</Text>\r\n                        {/* Description */}\r\n                    </Box>\r\n                </Flex>\r\n                <Tabs isFitted variant=\"enclosed\">\r\n                    <TabList mb=\"1em\">\r\n                        <Tab>Listings</Tab>\r\n                    </TabList>\r\n                    <TabPanels>\r\n                        <TabPanel>\r\n                            <Grid templateColumns=\"repeat(5, 1fr)\" gap={6}>\r\n                                {listings.map((listing, index) => (\r\n                                    <Box key={index} p={6} shadow=\"md\" borderWidth=\"1px\" cursor=\"pointer\" onClick={() => handleNFTClick(listing.tokenId)}>\r\n                                        <Image src={listing.image} alt={listing.name} boxSize=\"150px\" objectFit=\"cover\" />\r\n                                        <Text mt={2}>{listing.name}</Text>\r\n                                        <Text>Price: {ethers.utils.formatEther(listing.price)} ETH</Text>\r\n                                        {/* Wrap the BuyNow component to prevent event propagation */}\r\n                                        <div onClick={(e) => e.stopPropagation()}>\r\n                                            <BuyNow\r\n                                                erc721Address={contractAddress}\r\n                                                tokenId={listing.tokenId}\r\n                                                price={listing.price}\r\n                                            />\r\n                                        </div>\r\n                                    </Box>\r\n                                ))}\r\n                            </Grid>\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <Text>sort by price (highest to lowest, lowest to highest), ending soon ( base on expireTimestamp listing.expireTimestamp )before here...</Text>\r\n                            {/* Future implementation for displaying sold items */}\r\n                        </TabPanel>\r\n                    </TabPanels>\r\n                </Tabs>\r\n            </VStack>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Collection;\r\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n    uri: 'https://api.studio.thegraph.com/query/65229/nftindex/version/latest',\r\n    cache: new InMemoryCache(),\r\n});\r\n\r\n\r\n\r\nexport default client;\r\n","import React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; // Import Router components\nimport Home from './pages/Home';\nimport Wallet from './pages/Wallet'; // Make sure you've created this component\nimport Header from './components/Header';\nimport NFTDetail from './components/NFTDetail';\nimport Collection from './pages/Collection';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './graphql/apollo-client'; // Adjust the import path as needed\n\nfunction getLibrary(provider) {\n  return new ethers.providers.Web3Provider(provider);\n}\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <ChakraProvider theme={theme}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n          <Router>\n            <Header />\n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"/wallet\" element={<Wallet />} />\n              <Route path=\"/collection/:contractAddress\" element={<Collection />} />\n              <Route path=\"/collection/:contractAddress/:tokenId\" element={<NFTDetail />} />\n              {/* You can add more routes here */}\n            </Routes>\n          </Router>\n        </Web3ReactProvider>\n      </ChakraProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { ethers } from \"ethers\";\r\n\r\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42, 168587773] });\r\n\r\nexport function useWallet() {\r\n  const { activate, deactivate, active, account, library, chainId } = useWeb3React();\r\n\r\n  const connect = async () => {\r\n    try {\r\n      await activate(injected);\r\n    } catch (ex) {\r\n      console.log(ex);\r\n    }\r\n  };\r\n\r\n  const defaultProvider = async () => {\r\n    if (!process) return\r\n    return new ethers.providers.JsonRpcProvider(\r\n      process.env.REACT_APP_DEFAULT_RPC\r\n    )\r\n  }\r\n\r\n  const disconnect = async () => {\r\n    try {\r\n      deactivate();\r\n    } catch (ex) {\r\n      console.log(ex);\r\n    }\r\n  };\r\n\r\n  // Automatically try reconnecting if the session is still active\r\n  useEffect(() => {\r\n    injected.isAuthorized().then((isAuthorized) => {\r\n      if (isAuthorized) {\r\n        activate(injected);\r\n      }\r\n    });\r\n  }, [activate]);\r\n\r\n  return { connect, disconnect, active, account, library, chainId, defaultProvider };\r\n}\r\n"],"sourceRoot":""}